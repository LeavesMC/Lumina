--- a/folia-server/build.gradle.kts
+++ b/folia-server/build.gradle.kts
@@ -1,22 +_,21 @@
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
-import io.papermc.paperweight.util.data.FileEntry
-import paper.libs.com.google.gson.annotations.SerializedName
+import io.papermc.paperweight.util.Git
+import io.papermc.paperweight.util.path
+import io.papermc.paperweight.util.upstreamsDirectory
 import java.time.Instant
-import kotlin.io.path.readText
 
 plugins {
     `java-library`
     `maven-publish`
     idea
-    id("io.papermc.paperweight.core")
+    id("org.leavesmc.leavesweight.core")
 }
 
 val paperMavenPublicUrl = "https://repo.papermc.io/repository/maven-public/"
 
 dependencies {
     mache("io.papermc:mache:1.21.5+build.2")
-    paperclip("io.papermc:paperclip:3.0.3")
+    leavesclip("org.leavesmc:leavesclip:3.0.0")
     testRuntimeOnly("org.junit.platform:junit-platform-launcher")
 }
 
@@ -27,8 +_,9 @@
     //updatingMinecraft {
     //    oldPaperCommit = "f4f275519f7c1fbe9db173b7144a4fe81440e365"
     //}
-      
+
     val fork = forks.register("folia") {
+        rootDirectory = upstreamsDirectory().map { it.dir("folia") }
         upstream.patchDir("paperServer") {
             upstreamPath = "paper-server"
             excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
@@ -37,7 +_,23 @@
         }
     }
 
-    activeFork = fork
+    val lumina = forks.register("lumina") {
+        forks = fork
+        upstream.patchRepo("paperServer") {
+            upstreamRepo = fork.patchedRepo("paperServer")
+            patchesDir = rootDirectory.dir("lumina-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+
+        upstream.patchDir("foliaServer") {
+            upstreamPath = "folia-server"
+            excludes = setOf("src/minecraft", "paper-patches", "minecraft-patches", "build.gradle.kts", "build.gradle.kts.patch")
+            patchesDir = rootDirectory.dir("lumina-server/folia-patches")
+            outputDir = rootDirectory.dir("folia-server")
+        }
+    }
+
+    activeFork = lumina
 
     spigot {
         buildDataRef = "702e1a0a5072b2c4082371d5228cb30525687efc"
@@ -153,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":folia-api"))
+    implementation(project(":lumina-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -229,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "Folia",
+            "Implementation-Title" to "Lumina", // Lumina
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "Folia",
+            "Specification-Title" to "Lumina", // Lumina
             "Specification-Version" to project.version,
             "Specification-Vendor" to "Paper Team",
-            "Brand-Id" to "papermc:folia",
-            "Brand-Name" to "Folia",
+            "Brand-Id" to "leavesmc:lumina", // Lumina
+            "Brand-Name" to "Lumina", // Lumina
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
@@ -378,18 +_,27 @@
     classpath(tasks.createMojmapBundlerJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
+
+// Leaves start - create config file
+tasks.registerRunTask("createLuminaConfig") {
+    // TODO
+    description = "Create a new lumina.yml"
+    mainClass = "org.leavesmc.leaves.config.GlobalConfigCreator"
+    classpath(sourceSets.main.map { it.runtimeClasspath })
+}
+// Leaves end - create config file
 tasks.registerRunTask("runReobfBundler") {
     description = "Spin up a test server from the reobf bundler jar"
     classpath(tasks.createReobfBundlerJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
-tasks.registerRunTask("runPaperclip") {
-    description = "Spin up a test server from the Mojang mapped Paperclip jar"
-    classpath(tasks.createMojmapPaperclipJar.flatMap { it.outputZip })
+tasks.registerRunTask("runLeavesclip") {
+    description = "Spin up a test server from the Mojang mapped Leavesclip jar"
+    classpath(tasks.createMojmapLeavesclipJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
-tasks.registerRunTask("runReobfPaperclip") {
-    description = "Spin up a test server from the reobf Paperclip jar"
-    classpath(tasks.createReobfPaperclipJar.flatMap { it.outputZip })
+tasks.registerRunTask("runReobfLeavesclip") {
+    description = "Spin up a test server from the reobf Leavesclip jar"
+    classpath(tasks.createReobfLeavesclipJar.flatMap { it.outputZip })
     mainClass.set(null as String?)
 }
