From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Wed, 7 Feb 2024 02:00:50 +0000
Subject: [PATCH] Luminol Chat sign config


diff --git a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
index 479e6e2aa88a22ef7f8fccb06add6806f5b71d9d..83fbd13646be16a0672af9a9f307ad151ccdacc9 100644
--- a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -14,8 +14,14 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> entries) {
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
     public ArgumentSignatures(FriendlyByteBuf buf) {
-        this(buf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
+        this(readSign(buf)); // Luminol - Fix java compile
     }
+    // Luminol start - Add config for chat sign
+    private static List<ArgumentSignatures.Entry> readSign(FriendlyByteBuf buf) {
+        var entries = buf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), Entry::new);
+        return org.leavesmc.lumina.config.LuminaConfig.configModule.misc.mojangChatSign ? List.of() : entries;
+    }
+    // Luminol end
 
     public void write(FriendlyByteBuf buf) {
         buf.writeCollection(this.entries, (buf2, entry) -> entry.write(buf2));
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index aafeb9c61ddba6a8671f0238eda47b227619f1af..69c13463ac59d02544a0e4acd52aa615d23876b1 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -129,6 +129,16 @@ public class FriendlyByteBuf extends ByteBuf {
         // Paper end - Adventure; add max length parameter
         DataResult<JsonElement> dataresult = codec.encodeStart(JsonOps.INSTANCE, value);
 
+        //Luminol start - Add config for chat sign
+        if (codec == net.minecraft.network.protocol.status.ServerStatus.CODEC) {
+            JsonElement element = dataresult.getOrThrow( string -> new EncoderException("Failed to encode: " + string + " " + value));
+            element.getAsJsonObject().addProperty("preventsChatReports", !org.leavesmc.lumina.config.LuminaConfig.configModule.misc.mojangChatSign);
+
+            this.writeUtf(GSON.toJson(element));
+            return;
+        }
+        // Luminol end
+
         this.writeUtf(FriendlyByteBuf.GSON.toJson((JsonElement) dataresult.getOrThrow((s) -> {
             return new EncoderException("Failed to encode: " + s + " " + String.valueOf(value));
         })), maxLength); // Paper - Adventure; add max length parameter
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/Misc.java b/src/main/java/org/leavesmc/lumina/config/modules/Misc.java
index d6f41a391d597655d799249a17445dda22c83f03..ca1cca05408c4396f61b12d6b8e447574e829494 100644
--- a/src/main/java/org/leavesmc/lumina/config/modules/Misc.java
+++ b/src/main/java/org/leavesmc/lumina/config/modules/Misc.java
@@ -12,6 +12,7 @@ public class Misc {
     public String serverModName = "Lumina";
     public boolean fakeVanilla = false;
     public boolean checkUsername = true;
+    public boolean useVanillaRandomSourceForPlayers = true;
     public boolean alternativeKeepAlive = true;
     public boolean saveConfigAfterSet = true;
     public boolean verifyPublicKeyOnlyInOnlineMode = false;
