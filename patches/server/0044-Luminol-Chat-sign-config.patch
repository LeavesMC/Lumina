From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Wed, 7 Feb 2024 02:00:50 +0000
Subject: [PATCH] Luminol Chat sign config

This patch is Powered by Luminol(https://github.com/LuminolMC/Luminol)
License:
MIT License

Copyright (c) 2024 LuminolMC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

diff --git a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
index 479e6e2aa88a22ef7f8fccb06add6806f5b71d9d..f4fcaaf917cdc5a87e48376c112071d689fe3e94 100644
--- a/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
+++ b/src/main/java/net/minecraft/commands/arguments/ArgumentSignatures.java
@@ -14,8 +14,14 @@ public record ArgumentSignatures(List<ArgumentSignatures.Entry> entries) {
     private static final int MAX_ARGUMENT_NAME_LENGTH = 16;
 
     public ArgumentSignatures(FriendlyByteBuf buf) {
-        this(buf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), ArgumentSignatures.Entry::new));
+        this(readSign(buf)); // Luminol - Fix java compile
     }
+    // Luminol start - Add config for chat sign
+    private static List<ArgumentSignatures.Entry> readSign(FriendlyByteBuf buf) {
+        var entries = buf.readCollection(FriendlyByteBuf.limitValue(ArrayList::new, 8), Entry::new);
+        return org.leavesmc.lumina.config.LuminaConfig.configModule().misc.mojangChatSign ? List.of() : entries;
+    }
+    // Luminol end
 
     public void write(FriendlyByteBuf buf) {
         buf.writeCollection(this.entries, (buf2, entry) -> entry.write(buf2));
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index aafeb9c61ddba6a8671f0238eda47b227619f1af..6d77ed5436ba1cf68a69d133f06447228febdb94 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -129,6 +129,16 @@ public class FriendlyByteBuf extends ByteBuf {
         // Paper end - Adventure; add max length parameter
         DataResult<JsonElement> dataresult = codec.encodeStart(JsonOps.INSTANCE, value);
 
+        //Luminol start - Add config for chat sign
+        if (codec == net.minecraft.network.protocol.status.ServerStatus.CODEC) {
+            JsonElement element = dataresult.getOrThrow( string -> new EncoderException("Failed to encode: " + string + " " + value));
+            element.getAsJsonObject().addProperty("preventsChatReports", !org.leavesmc.lumina.config.LuminaConfig.configModule().misc.mojangChatSign);
+
+            this.writeUtf(GSON.toJson(element));
+            return;
+        }
+        // Luminol end
+
         this.writeUtf(FriendlyByteBuf.GSON.toJson((JsonElement) dataresult.getOrThrow((s) -> {
             return new EncoderException("Failed to encode: " + s + " " + String.valueOf(value));
         })), maxLength); // Paper - Adventure; add max length parameter
