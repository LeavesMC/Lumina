From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7@outlook.com>
Date: Wed, 14 Aug 2024 21:51:45 +0800
Subject: [PATCH] Rewrite Nether Portal find logic


diff --git a/src/main/java/io/papermc/paper/util/PoiAccess.java b/src/main/java/io/papermc/paper/util/PoiAccess.java
index 69be1761b3b5ba7b496c1c10a4db897e6212d671..b65ea7f1ffb16b750dc4a33334b4dc71d8452d4c 100644
--- a/src/main/java/io/papermc/paper/util/PoiAccess.java
+++ b/src/main/java/io/papermc/paper/util/PoiAccess.java
@@ -195,7 +195,7 @@ public final class PoiAccess {
         findClosestPoiDataRecords(poiStorage, villagePlaceType, predicate, sourcePosition, range, maxDistanceSquared, occupancy, load, ret);
     }
 
-    public static void findClosestPoiDataRecords(final PoiManager poiStorage,
+    public static void findClosestPoiDataRecords(final net.minecraft.world.level.portal.PortalForcer.IPoiManager poiStorage, // Lumina - rewrite nether portal find logic
                                                  final Predicate<Holder<PoiType>> villagePlaceType,
                                                  // position predicate must not modify chunk POI
                                                  final BiPredicate<Holder<PoiType>, BlockPos> predicate,
@@ -211,10 +211,10 @@ public final class PoiAccess {
         double closestDistanceSquared = maxDistanceSquared;
 
         final int lowerX = Mth.floor(sourcePosition.getX() - range) >> 4;
-        final int lowerY = WorldUtil.getMinSection(poiStorage.world);
+        final int lowerY = poiStorage.getMinSection(); // Lumina - rewrite nether portal find logic
         final int lowerZ = Mth.floor(sourcePosition.getZ() - range) >> 4;
         final int upperX = Mth.floor(sourcePosition.getX() + range) >> 4;
-        final int upperY = WorldUtil.getMaxSection(poiStorage.world);
+        final int upperY = poiStorage.getMaxSection(); // Lumina - rewrite nether portal find logic
         final int upperZ = Mth.floor(sourcePosition.getZ() + range) >> 4;
 
         final int centerX = sourcePosition.getX() >> 4;
@@ -273,7 +273,7 @@ public final class PoiAccess {
                 }
             }
 
-            final Optional<PoiSection> poiSectionOptional = load ? poiStorage.getOrLoad(key) : poiStorage.get(key);
+            final Optional<PoiSection> poiSectionOptional = load ? poiStorage._getOrLoad(key) : poiStorage._get(key); // Lumina - rewrite nether portal find logic
 
             if (poiSectionOptional == null || !poiSectionOptional.isPresent()) {
                 continue;
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 16e2e3edc62f9774518b8e783f8eb1ca35d413c8..615b167f461ab9f3346311fd0d06264b7b381a73 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -37,7 +37,7 @@ import net.minecraft.world.level.chunk.storage.RegionStorageInfo;
 import net.minecraft.world.level.chunk.storage.SectionStorage;
 import net.minecraft.world.level.chunk.storage.SimpleRegionStorage;
 
-public class PoiManager extends SectionStorage<PoiSection> {
+public class PoiManager extends SectionStorage<PoiSection> implements net.minecraft.world.level.portal.PortalForcer.IPoiManager { // Lumina - rewrite nether portal find logic
     public static final int MAX_VILLAGE_DISTANCE = 6;
     public static final int VILLAGE_SECTION_SIZE = 1;
     // Paper start - rewrite chunk system
@@ -400,6 +400,30 @@ public class PoiManager extends SectionStorage<PoiSection> {
             .forEach(chunkPos -> world.getChunk(chunkPos.x, chunkPos.z, ChunkStatus.EMPTY));
     }
 
+    // Lumina start - rewrite nether portal find logic
+
+    @Override
+    public int getMinSection() {
+        return io.papermc.paper.util.WorldUtil.getMinSection(this.world);
+    }
+
+    @Override
+    public int getMaxSection() {
+        return io.papermc.paper.util.WorldUtil.getMaxSection(this.world);
+    }
+
+    @Override
+    public Optional<PoiSection> _getOrLoad(long pos) {
+        return getOrLoad(pos);
+    }
+
+    @Override
+    public Optional<PoiSection> _get(long pos) {
+        return get(pos);
+    }
+
+    // Lumina end - rewrite nether portal find logic
+
     final class DistanceTracker extends SectionTracker {
         private final Long2ByteMap levels = new Long2ByteOpenHashMap();
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 4ee7d75c56d9f9ff3607276857dde84410ba3f2a..8731cebf72febd84822284914bbf76075e6b4b0b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -78,6 +78,7 @@ public class PoiSection {
     private boolean add(PoiRecord poi) {
         BlockPos blockPos = poi.getPos();
         Holder<PoiType> holder = poi.getPoiType();
+        if (holder.is(PoiTypes.NETHER_PORTAL)) System.out.println("Adding nether portal at " + blockPos); // Lumina - rewrite nether portal logic
         short s = SectionPos.sectionRelativePos(blockPos);
         PoiRecord poiRecord = this.records.get(s);
         if (poiRecord != null) {
@@ -95,6 +96,7 @@ public class PoiSection {
 
     public void remove(BlockPos pos) {
         PoiRecord poiRecord = this.records.remove(SectionPos.sectionRelativePos(pos));
+        if (poiRecord.getPoiType().is(PoiTypes.NETHER_PORTAL)) System.out.println("Adding nether portal at " + pos); // Lumina - rewrite nether portal logic
         if (poiRecord == null) {
             LOGGER.error("POI data mismatch: never registered at {}", pos);
         } else {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index e251935b89799046e82228f49ea7a7737078892b..44fac6e555685887d7389ef0ae3b33e65f314447 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -11,6 +11,7 @@ import net.minecraft.server.level.TicketType;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.ai.village.poi.PoiSection;
 import net.minecraft.world.entity.ai.village.poi.PoiTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.Blocks;
@@ -39,6 +40,7 @@ public class PortalForcer {
 
     public PortalForcer(ServerLevel world) {
         this.level = world;
+        cacheManager = new CacheManager(this.level); // Lumina - rewrite nether portal find logic
     }
 
     public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos pos, boolean destIsNether, WorldBorder worldBorder) {
@@ -46,7 +48,50 @@ public class PortalForcer {
         return this.findPortalAround(pos, worldBorder, destIsNether ? level.paperConfig().environment.portalCreateRadius : level.paperConfig().environment.portalSearchRadius); // Search Radius // Paper - Configurable portal search radius
     }
 
+    // Lumina start - rewrite nether portal find logic
+    private static class CacheManager implements IPoiManager {
+        private final java.util.concurrent.ConcurrentHashMap<Long, PoiSection> portalCache = new java.util.concurrent.ConcurrentHashMap<>();
+        private final PoiManager poiManager;
+
+        public CacheManager(ServerLevel level) {
+            this.poiManager = level.getPoiManager();
+        }
+
+        @Override
+        public int getMinSection() {
+            return this.poiManager.getMinSection();
+        }
+
+        @Override
+        public int getMaxSection() {
+            return this.poiManager.getMaxSection();
+        }
+
+        @Override
+        public Optional<PoiSection> _getOrLoad(long pos) {
+            return Optional.ofNullable(portalCache.get(pos));
+        }
+
+        @Override
+        public Optional<PoiSection> _get(long pos) {
+            return this.poiManager._get(pos);
+        }
+
+        public void update(BlockPos pos) {
+        }
+    }
+    
+    private CacheManager cacheManager;
+
+    public interface IPoiManager {
+        int getMinSection();
+        int getMaxSection();
+        Optional<PoiSection> _getOrLoad(long pos);
+        Optional<PoiSection> _get(long pos);
+    }
+
     public Optional<BlockUtil.FoundRectangle> findPortalAround(BlockPos blockposition, WorldBorder worldborder, int i) {
+        // Lumina end - rewrite nether portal find logic
         PoiManager villageplace = this.level.getPoiManager();
         // int i = flag ? 16 : 128;
         // CraftBukkit end
