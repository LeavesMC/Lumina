From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Wed, 7 Feb 2024 08:59:41 +0000
Subject: [PATCH] Leaves Bladeren protocol


diff --git a/src/main/java/top/leavesmc/leaves/protocol/bladeren/BladerenProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/bladeren/BladerenProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..09acf4e5e8b31b10960e93ac6e80bae06fec6cf9
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/bladeren/BladerenProtocol.java
@@ -0,0 +1,150 @@
+package top.leavesmc.leaves.protocol.bladeren;
+
+import com.google.common.collect.Maps;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.common.custom.CustomPacketPayload;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.protocol.core.LeavesProtocol;
+import top.leavesmc.leaves.protocol.core.ProtocolHandler;
+import top.leavesmc.leaves.protocol.core.ProtocolUtils;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiConsumer;
+
+@LeavesProtocol(namespace = "bladeren")
+public class BladerenProtocol {
+
+    public static final String PROTOCOL_ID = "bladeren";
+    public static final String PROTOCOL_VERSION = "1.0.0";
+
+    private static final ResourceLocation HELLO_ID = id("hello");
+    private static final ResourceLocation FEATURE_MODIFY_ID = id("feature_modify");
+
+    private static final Map<String, BiConsumer<ServerPlayer, CompoundTag>> registeredFeatures = Maps.newConcurrentMap();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    @ProtocolHandler.PayloadReceiver(payload = BladerenHelloPayload.class, payloadId = "hello")
+    private static void handleHello(@NotNull ServerPlayer player, @NotNull BladerenHelloPayload payload) {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.enableBaseProtocol) {
+            String clientVersion = payload.version;
+            CompoundTag tag = payload.nbt;
+
+            if (tag != null) {
+                CompoundTag featureNbt = tag.getCompound("Features");
+                for (String name : featureNbt.getAllKeys()) {
+
+                    final BiConsumer<ServerPlayer,CompoundTag> target = registeredFeatures.get(name);
+
+                    if (target != null){
+                        target.accept(player, featureNbt.getCompound(name));
+                    }
+                }
+            }
+        }
+    }
+
+    @ProtocolHandler.PayloadReceiver(payload = BladerenFeatureModifyPayload.class, payloadId = "feature_modify")
+    private static void handleModify(@NotNull ServerPlayer player, @NotNull BladerenFeatureModifyPayload payload) {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.enableBaseProtocol) {
+            String name = payload.name;
+            CompoundTag tag = payload.nbt;
+
+            final BiConsumer<ServerPlayer,CompoundTag> target = registeredFeatures.get(name);
+
+            if (target != null){
+                target.accept(player, tag);
+            }
+        }
+    }
+
+    @ProtocolHandler.PlayerJoin
+    public static void onPlayerJoin(@NotNull ServerPlayer player) {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.enableBaseProtocol) {
+            CompoundTag tag = new CompoundTag();
+            LeavesFeatureSet.writeNBT(tag);
+            ProtocolUtils.sendPayloadPacket(player, new BladerenHelloPayload(PROTOCOL_VERSION, tag));
+        }
+    }
+
+    public static void registerFeature(String name, BiConsumer<ServerPlayer, CompoundTag> consumer) {
+        registeredFeatures.put(name, consumer);
+    }
+
+    public static class LeavesFeatureSet {
+
+        private static final Map<String, LeavesFeature> features = new HashMap<>();
+
+        public static void writeNBT(@NotNull CompoundTag tag) {
+            CompoundTag featureNbt = new CompoundTag();
+            features.values().forEach(feature -> feature.writeNBT(featureNbt));
+            tag.put("Features", featureNbt);
+        }
+
+        public static void register(LeavesFeature feature) {
+            features.put(feature.name, feature);
+        }
+    }
+
+    public record LeavesFeature(String name, String value) {
+
+        @NotNull
+        @Contract("_, _ -> new")
+        public static LeavesFeature of(String name, boolean value) {
+            return new LeavesFeature(name, Boolean.toString(value));
+        }
+
+        public void writeNBT(@NotNull CompoundTag rules) {
+            CompoundTag rule = new CompoundTag();
+            rule.putString("Feature", name);
+            rule.putString("Value", value);
+            rules.put(name, rule);
+        }
+    }
+
+    public record BladerenFeatureModifyPayload(String name, CompoundTag nbt) implements CustomPacketPayload {
+
+        public BladerenFeatureModifyPayload(ResourceLocation location, FriendlyByteBuf buf) {
+            this(buf.readUtf(), buf.readNbt());
+        }
+
+        @Override
+        public void write(@NotNull FriendlyByteBuf buf) {
+            buf.writeUtf(name);
+            buf.writeNbt(nbt);
+        }
+
+        @Override
+        @NotNull
+        public ResourceLocation id() {
+            return FEATURE_MODIFY_ID;
+        }
+    }
+
+    public record BladerenHelloPayload(String version, CompoundTag nbt) implements CustomPacketPayload {
+
+        public BladerenHelloPayload(ResourceLocation location, @NotNull FriendlyByteBuf buf) {
+            this(buf.readUtf(64), buf.readNbt());
+        }
+
+        @Override
+        public void write(@NotNull FriendlyByteBuf buf) {
+            buf.writeUtf(version);
+            buf.writeNbt(nbt);
+        }
+
+        @Override
+        @NotNull
+        public ResourceLocation id() {
+            return HELLO_ID;
+        }
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..f00dbcc6b99ff99fdf562b31c969ae268c98e8e7
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/bladeren/MsptSyncProtocol.java
@@ -0,0 +1,90 @@
+package top.leavesmc.leaves.protocol.bladeren;
+
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickData;
+import io.papermc.paper.threadedregions.TickRegions;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLists;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.protocol.core.LeavesProtocol;
+import top.leavesmc.leaves.protocol.core.ProtocolHandler;
+import top.leavesmc.leaves.protocol.core.ProtocolUtils;
+
+import java.util.List;
+
+@LeavesProtocol(namespace = "bladeren")
+public class MsptSyncProtocol {
+
+    public static final String PROTOCOL_ID = "bladeren";
+
+    private static final ResourceLocation MSPT_SYNC = id("mspt_sync");
+
+    private static final List<ServerPlayer> players = ObjectLists.synchronize(new ObjectArrayList<>());
+
+    private static int tickCounter = 0;
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    @ProtocolHandler.Init
+    public static void init() {
+        BladerenProtocol.registerFeature("mspt_sync", (player, compoundTag) -> {
+            if (compoundTag.getString("Value").equals("true"))  {
+                onPlayerSubmit(player);
+            } else {
+                onPlayerLoggedOut(player);
+            }
+        });
+    }
+
+    @ProtocolHandler.PlayerLeave
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.msptSyncProtocol) {
+            players.remove(player);
+        }
+    }
+
+    @ProtocolHandler.Ticker
+    public static void tick() {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.msptSyncProtocol) {
+            if (players.isEmpty()) {
+                return;
+            }
+
+            if (tickCounter++ % org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.msptSyncTickInterval == 0) {
+                for (ServerPlayer player : players){
+                    final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region = ((ServerLevel) player.level()).regioniser.getRegionAtUnsynchronised(player.sectionX,player.sectionZ);
+
+                    if (region == null){
+                        continue;
+                    }
+
+                    final TickData.TickReportData reportData = region.getData().getRegionSchedulingHandle().getTickReport5s(System.nanoTime());
+
+                    if (reportData != null){
+                        final TickData.SegmentData tpsData = reportData.tpsData().segmentAll();
+                        final double mspt = reportData.timePerTickData().segmentAll().average() / 1.0E6;
+                        final double tps = tpsData.average();
+
+                        ProtocolUtils.sendPayloadPacket(player, MSPT_SYNC, buf -> {
+                            buf.writeDouble(mspt);
+                            buf.writeDouble(tps);
+                        });
+                    }
+                }
+            }
+        }
+    }
+
+    public static void onPlayerSubmit(@NotNull ServerPlayer player) {
+        if (org.leavesmc.lumina.config.modules.gameplay.LeavesBladerenProtocolConfig.msptSyncProtocol) {
+            players.add(player);
+        }
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocol.java
index 64a1d25973b032e8cab64bbffa6824a131676773..a2fb7ab4923ca7953e1d81e3da28d92a717a53f9 100644
--- a/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocol.java
+++ b/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocol.java
@@ -9,8 +9,6 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 public @interface LeavesProtocol {
 
-    String namespace() default "minecraft";
-
-    String[] namespaces() default {};
+    String[] namespace();
 
 }
diff --git a/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocolManager.java b/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocolManager.java
index 8b7813c442733f5d4d3b2a072902099cbe596b37..1f5b37daa5cbb709eeacf3dc7a4f9b4a0dc05274 100644
--- a/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocolManager.java
+++ b/src/main/java/top/leavesmc/leaves/protocol/core/LeavesProtocolManager.java
@@ -60,7 +60,7 @@ public class LeavesProtocolManager {
                     return;
                 }
 
-                Map<ProtocolHandler.PayloadReceiver, Constructor<? extends CustomPacketPayload>> map = new HashMap<>();
+                Map<ProtocolHandler.PayloadReceiver, Constructor<? extends CustomPacketPayload>> map = KNOWN_TYPES.getOrDefault(protocol, new HashMap<>());
                 for (final Method method : methods) {
                     if (method.isBridge() || method.isSynthetic() || !Modifier.isStatic(method.getModifiers())) {
                         continue;
@@ -135,13 +135,13 @@ public class LeavesProtocolManager {
 
     public static CustomPacketPayload getPayload(ResourceLocation id, FriendlyByteBuf buf) {
         for (LeavesProtocol protocol : KNOWN_TYPES.keySet()) {
-            if (!protocol.namespace().equals(id.getNamespace()) && !ArrayUtils.contains(protocol.namespaces(), id.getNamespace())) {
+            if (!ArrayUtils.contains(protocol.namespace(), id.getNamespace())) {
                 continue;
             }
 
             Map<ProtocolHandler.PayloadReceiver, Constructor<? extends CustomPacketPayload>> map = KNOWN_TYPES.get(protocol);
             for (ProtocolHandler.PayloadReceiver receiver : map.keySet()) {
-                if (receiver.ignoreId() || receiver.payloadId().equals(id.getPath()) || ArrayUtils.contains(receiver.payloadIds(), id.getPath())) {
+                if (receiver.ignoreId() || ArrayUtils.contains(receiver.payloadId(), id.getPath())) {
                     try {
                         return map.get(receiver).newInstance(id, buf);
                     } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {
@@ -155,15 +155,14 @@ public class LeavesProtocolManager {
 
     public static void handlePayload(ServerPlayer player, CustomPacketPayload payload) {
         for (LeavesProtocol protocol : KNOW_RECEIVERS.keySet()) {
-            if (!protocol.namespace().equals(payload.id().getNamespace()) && !ArrayUtils.contains(protocol.namespaces(), payload.id().getNamespace())) {
+            if (!ArrayUtils.contains(protocol.namespace(), payload.id().getNamespace()))  {
                 continue;
             }
 
             Map<ProtocolHandler.PayloadReceiver, Method> map = KNOW_RECEIVERS.get(protocol);
             for (ProtocolHandler.PayloadReceiver receiver : map.keySet()) {
                 if (payload.getClass() == receiver.payload()) {
-                    if (receiver.ignoreId() || receiver.payloadId().equals(payload.id().getPath()) ||
-                        ArrayUtils.contains(receiver.payloadIds(), payload.id().getPath())) {
+                    if (receiver.ignoreId() || ArrayUtils.contains(receiver.payloadId(), payload.id().getPath())) {
                         try {
                             map.get(receiver).invoke(null, player, payload);
                         } catch (InvocationTargetException | IllegalAccessException e) {
@@ -226,7 +225,7 @@ public class LeavesProtocolManager {
     public static void handleMinecraftRegister(String channelId, ServerPlayer player) {
         for (LeavesProtocol protocol : MINECRAFT_REGISTER.keySet()) {
             String[] channel = channelId.split(":");
-            if (!protocol.namespace().equals(channel[0]) && !ArrayUtils.contains(protocol.namespaces(), channel[0])) {
+            if (!ArrayUtils.contains(protocol.namespace(), channel[0])) {
                 continue;
             }
 
diff --git a/src/main/java/top/leavesmc/leaves/protocol/core/ProtocolHandler.java b/src/main/java/top/leavesmc/leaves/protocol/core/ProtocolHandler.java
index d696f001d2576d1b61cc732c81f22eb52205072b..92ad6e9b1c0d9640b80c1ebe739c613d989eec21 100644
--- a/src/main/java/top/leavesmc/leaves/protocol/core/ProtocolHandler.java
+++ b/src/main/java/top/leavesmc/leaves/protocol/core/ProtocolHandler.java
@@ -21,9 +21,7 @@ public class ProtocolHandler {
 
         Class<? extends CustomPacketPayload> payload();
 
-        String[] payloadIds() default {};
-
-        String payloadId() default "";
+        String[] payloadId();
 
         boolean ignoreId() default false;
     }
