From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7@outlook.com>
Date: Sun, 18 Aug 2024 21:44:23 +0800
Subject: [PATCH] Rewrite nether portal find logic


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/poi/PoiChunk.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/poi/PoiChunk.java
index bbf9d6c1c9525d97160806819a57be03eca290f1..543f751624a2e50163e5cd68ca145398c04e74dd 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/poi/PoiChunk.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/poi/PoiChunk.java
@@ -192,6 +192,7 @@ public final class PoiChunk {
                 // completely empty, no point in storing this
                 continue;
             }
+            world.chunkTaskScheduler.scheduleChunkTask(chunkX, chunkZ, () -> { for (net.minecraft.core.BlockPos pos : deserialized.loadedNetherPortalPoi) world.netherPortalPoiManager.addPoi(pos, world.getBlockState(pos)); }, ca.spottedleaf.concurrentutil.util.Priority.HIGHEST); // Lumina - rewrite nether portal find logic
 
             readAnything = true;
             ret.sections[sectionY - ret.minSection] = deserialized;
diff --git a/src/main/java/net/minecraft/BlockUtil.java b/src/main/java/net/minecraft/BlockUtil.java
index 840611677feb4979eb2d492063ae4388ea350506..ab2a2cf0df10cee8045fbb86abce9eafad176f2c 100644
--- a/src/main/java/net/minecraft/BlockUtil.java
+++ b/src/main/java/net/minecraft/BlockUtil.java
@@ -143,6 +143,25 @@ public class BlockUtil {
             this.axis1Size = width;
             this.axis2Size = height;
         }
+
+        // Lumina start - rewrite nether portal find logic
+        @Override
+        public int hashCode() {
+            return java.util.Objects.hash(minCorner, axis1Size, axis2Size);
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            } else if (obj instanceof FoundRectangle other) {
+                return minCorner.equals(other.minCorner) &&
+                        axis1Size == other.axis1Size &&
+                        axis2Size == other.axis2Size;
+            }
+            return false;
+        }
+        // Lumina end - rewrite nether portal find logic
     }
 
     public static class IntBounds {
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index 137a15e142c6e934804e3f2a072cdac8d40a2ab2..404f27dd09f6f136b51a1b2eeec8da0384072dee 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -33,6 +33,39 @@ public class SectionPos extends Vec3i {
         super(x, y, z);
     }
 
+    // Lumina start - rewrite nether portal find logic
+    public SectionPos north() {
+        return relative(Direction.NORTH, 1);
+    }
+
+    public SectionPos south() {
+        return relative(Direction.SOUTH, 1);
+    }
+
+    public SectionPos west() {
+        return relative(Direction.WEST, 1);
+    }
+
+    public SectionPos east() {
+        return relative(Direction.EAST, 1);
+    }
+
+    public SectionPos below() {
+        return relative(Direction.DOWN, 1);
+    }
+
+    public SectionPos above() {
+        return relative(Direction.UP, 1);
+    }
+
+    @Override
+    public SectionPos relative(Direction direction, int i) {
+        return i == 0
+                ? this
+                : new SectionPos(this.getX() + direction.getStepX() * i, this.getY() + direction.getStepY() * i, this.getZ() + direction.getStepZ() * i);
+    }
+    // Lumina end - rewrite nether portal find logic
+
     public static SectionPos of(int x, int y, int z) {
         return new SectionPos(x, y, z);
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8ca98b4b4854294a1659ec2a9f7f55733685d8aa..cfa568e169b5e09fed0936ecc00906bfa25c109d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -225,6 +225,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     private final StructureCheck structureCheck;
     public final boolean tickTime; // Folia - region threading
     private final RandomSequences randomSequences;
+    public final org.leavesmc.lumina.utils.LevelNetherPortalPoiManager netherPortalPoiManager; // Lumina - rewrite nether portal find logic
 
     // CraftBukkit start
     public final LevelStorageSource.LevelStorageAccess convertable;
@@ -645,6 +646,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         });
         this.chunkSource.getGeneratorState().ensureStructuresGenerated();
         this.portalForcer = new PortalForcer(this);
+        this.netherPortalPoiManager = new org.leavesmc.lumina.utils.LevelNetherPortalPoiManager(this); // Lumina - rewrite nether portal find logic
         //this.updateSkyBrightness(); // Folia - region threading - delay until first tick
         this.prepareWeather();
         this.getWorldBorder().setAbsoluteMaxSize(minecraftserver.getAbsoluteMaxWorldSize());
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1998d2133d68e9aaa2881688e765bfe0157a39b6..6e91b6c6b72671ec6fddc5e29b7bed8274a45dc6 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4604,12 +4604,16 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     net.minecraft.world.level.chunk.status.ChunkStatus.EMPTY,
                     ca.spottedleaf.concurrentutil.util.Priority.HIGH,
                     (chunks) -> {
-                        BlockUtil.FoundRectangle portal =
-                            net.minecraft.world.level.block.NetherPortalBlock.findPortalAround(destination, targetPos, destinationBorder, portalSearchRadius);
+                        // Lumina start - rewrite nether portal find logic
+                        BlockUtil.FoundRectangle portal = destination.netherPortalPoiManager.findClosestPortal(targetPos, destinationBorder);
+                        if (portal == null) {
+                            portal = net.minecraft.world.level.block.NetherPortalBlock.findPortalAround(destination, targetPos, destinationBorder, portalSearchRadius);
+                        }
                         if (portal != null) {
                             portalFound.complete(portal);
                             return;
                         }
+                        // Lumina end - rewrite nether portal find logic
 
                         // add tickets so that we can re-search for a portal once the chunks are loaded
                         Long ticketId = Long.valueOf(CREATE_PORTAL_DOUBLE_CHECK.getAndIncrement());
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 827991ee61406bcda3f4794dcc735c0e2e0e09af..d6cfca3a47285acc04f8466f7c95f350e764a460 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -29,6 +29,8 @@ public class PoiSection implements ca.spottedleaf.moonrise.patches.chunk_system.
     private final Map<Holder<PoiType>, Set<PoiRecord>> byType = Maps.newHashMap(); public final Map<Holder<PoiType>, Set<PoiRecord>> getData() { return this.byType; } // Paper - public accessor
     private final Runnable setDirty;
     private boolean isValid;
+    private boolean loading = false; // Lumina - rewrite nether portal find logic
+    public final Set<BlockPos> loadedNetherPortalPoi = new java.util.HashSet<>();
 
     // Paper start - rewrite chunk system
     private final Optional<PoiSection> noAllocOptional = Optional.of((PoiSection)(Object)this);
@@ -51,7 +53,9 @@ public class PoiSection implements ca.spottedleaf.moonrise.patches.chunk_system.
     PoiSection(Runnable updateListener, boolean valid, List<PoiRecord> pois) {
         this.setDirty = updateListener;
         this.isValid = valid;
+        this.loading = true; // Lumina - rewrite nether portal find logic
         pois.forEach(this::add);
+        this.loading = false; // Lumina - rewrite nether portal find logic
     }
 
     public PoiSection.Packed pack() {
@@ -86,6 +90,7 @@ public class PoiSection implements ca.spottedleaf.moonrise.patches.chunk_system.
 
             Util.logAndPauseIfInIde("POI data mismatch: already registered at " + blockPos);
         }
+        if (holder.is(PoiTypes.NETHER_PORTAL) && loading) loadedNetherPortalPoi.add(blockPos); // Lumina - rewrite nether portal find logic
 
         this.records.put(s, poi);
         this.byType.computeIfAbsent(holder, type -> Sets.newHashSet()).add(poi);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 955d9073287eda25032a4a3a7de8fee2ffcac8f7..cafecd44b1341127e1dd9d98b31b70d10d616113 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -60,6 +60,7 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.FuelValues;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index b5228429d1791d7b0038ce549f250a117f654c11..ef4d0423dcf348b3758be553968e06888b23c499 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -40,6 +40,7 @@ import net.minecraft.world.level.block.entity.BlockEntityTicker;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.gameevent.EuclideanGameEventListenerRegistry;
 import net.minecraft.world.level.gameevent.GameEventListener;
@@ -457,6 +458,15 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     public BlockState setBlockState(BlockPos blockposition, BlockState iblockdata, boolean flag, boolean doPlace) {
         ca.spottedleaf.moonrise.common.util.TickThread.ensureTickThread(this.level, blockposition, "Updating block asynchronously"); // Folia - region threading
         // CraftBukkit end
+        // Lumina start - rewrite nether portal find logic
+        BlockState oldState = getBlockState(blockposition);
+        if (oldState.is(net.minecraft.world.level.block.Blocks.NETHER_PORTAL)) {
+            level.netherPortalPoiManager.removePoi(blockposition);
+        }
+        if (iblockdata.is(net.minecraft.world.level.block.Blocks.NETHER_PORTAL)) {
+            level.netherPortalPoiManager.addPoi(blockposition, iblockdata);
+        }
+        // Lumina end - rewrite nether portal find logic
         int i = blockposition.getY();
         LevelChunkSection chunksection = this.getSection(this.getSectionIndex(i));
         boolean flag1 = chunksection.hasOnlyAir();
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/Performance.java b/src/main/java/org/leavesmc/lumina/config/modules/Performance.java
index 4739bdb828be18d9bec7ae2d6c6b332de879acee..8cb99bc8719165824e434023fbff8be1eca844c0 100644
--- a/src/main/java/org/leavesmc/lumina/config/modules/Performance.java
+++ b/src/main/java/org/leavesmc/lumina/config/modules/Performance.java
@@ -11,4 +11,5 @@ public class Performance {
     public boolean entityGoalSelectorInactiveTick = false;
     public boolean allowLoadChunksToActiveClimbingEntities = false;
     public boolean optimizeSuffocation = false;
+    public boolean cacheNetherPortalFind = true;
 }
diff --git a/src/main/java/org/leavesmc/lumina/utils/LevelNetherPortalPoiManager.java b/src/main/java/org/leavesmc/lumina/utils/LevelNetherPortalPoiManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6e5264025c4d0a6899ec39ffdcaca76821398a2
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/utils/LevelNetherPortalPoiManager.java
@@ -0,0 +1,223 @@
+package org.leavesmc.lumina.utils;
+
+import io.papermc.paper.threadedregions.RegionizedServer;
+import net.minecraft.BlockUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.SectionPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.dimension.LevelStem;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.leavesmc.lumina.config.LuminaConfig;
+
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+
+import static net.minecraft.BlockUtil.*;
+
+public class LevelNetherPortalPoiManager {
+    private final int maxBuildSubChunkY;
+    private final int minBuildSubChunkY;
+    private final int maxFindSubChunkDistance;
+    private final int maxFindDistance;
+    private final ServerLevel level;
+    private final boolean isNether;
+    private final ConcurrentMap<SectionPos, ConcurrentMap<BlockPos, FoundRectangle>> poiData = new ConcurrentHashMap<>();
+    private final ConcurrentMap<BlockPos, FoundRectangle> cache = new ConcurrentHashMap<>(); // this may cause error when border move
+    private final ConcurrentMap<FoundRectangle, Set<BlockPos>> reserveCache = new ConcurrentHashMap<>();
+    private final ConcurrentMap<SectionPos, Set<FoundRectangle>> affectCache = new ConcurrentHashMap<>();
+    private final ConcurrentMap<FoundRectangle, Set<SectionPos>> reserveAffectCache = new ConcurrentHashMap<>();
+    private static final ConcurrentMap<BlockPos, FoundRectangle> EMPTY_SUB_CHUNK_DATA = new ConcurrentHashMap<>();
+
+    public LevelNetherPortalPoiManager(@NotNull ServerLevel level) {
+        this.isNether = level.getTypeKey() == LevelStem.NETHER;
+        this.maxFindSubChunkDistance = isNether ? 1 : 8;
+        this.maxFindDistance = isNether ? 16 : 128;
+        this.level = level;
+        int minBuildHeight = isNether ? 0 : -64;
+        int maxBuildHeight = isNether ? 256 : 320;
+        this.minBuildSubChunkY = minBuildHeight >> 4;
+        this.maxBuildSubChunkY = maxBuildHeight >> 4;
+    }
+
+    public void addPoi(@NotNull BlockPos pos, @NotNull BlockState state) {
+        FoundRectangle foundRectangle = BlockUtil.getLargestRectangleAround(
+                pos,
+                state.getValue(BlockStateProperties.HORIZONTAL_AXIS),
+                21,
+                Direction.Axis.Y,
+                21,
+                (blockPos) -> this.level.getBlockStateFromEmptyChunk(blockPos) == state
+        );
+        SectionPos subChunkPos = SectionPos.of(pos);
+        if(foundRectangle.axis2Size == 1 && foundRectangle.axis1Size == 1) {
+            addInternal(pos, subChunkPos, foundRectangle);
+        } else {
+            RegionizedServer.getInstance().taskQueue.queueChunkTask(
+                    level, subChunkPos.getX(), subChunkPos.getZ(),
+                    () -> addInternal(pos, subChunkPos, foundRectangle));
+        }
+    }
+
+    private void addInternal(@NotNull BlockPos pos, @NotNull SectionPos subChunkPos, @NotNull FoundRectangle foundRectangle) {
+        if (LuminaConfig.configModule().performance.cacheNetherPortalFind) {
+            Set<FoundRectangle> affectSet = affectCache.getOrDefault(subChunkPos, Set.of());
+            affectCache.remove(subChunkPos);
+            for (FoundRectangle affect : affectSet) {
+                Set<BlockPos> startSet = reserveCache.getOrDefault(affect, Set.of());
+                reserveCache.remove(affect);
+                for (BlockPos start : startSet) {
+                    cache.remove(start);
+                }
+            }
+        }
+        poiData.computeIfAbsent(
+                SectionPos.of(pos),
+                (k) -> new ConcurrentHashMap<>()
+        ).put(pos, foundRectangle);
+    }
+
+    public void removePoi(BlockPos pos) {
+        ConcurrentMap<BlockPos, FoundRectangle> set = poiData.get(SectionPos.of(pos));
+        if (set != null) {
+            if (LuminaConfig.configModule().performance.cacheNetherPortalFind) {
+                FoundRectangle foundRectangle = set.get(pos);
+                if (foundRectangle != null) {
+                    Set<SectionPos> affectSet = reserveAffectCache.getOrDefault(foundRectangle, Set.of());
+                    reserveAffectCache.remove(foundRectangle);
+                    for (SectionPos affect : affectSet) {
+                        affectCache.remove(affect);
+                    }
+                    affectCache.remove(SectionPos.of(pos));
+                    cache.remove(pos);
+                }
+            }
+            set.remove(pos);
+        }
+    }
+
+    private ConcurrentMap<BlockPos, FoundRectangle> getSubChunkData(SectionPos subChunkPos) {
+        return poiData.getOrDefault(subChunkPos, EMPTY_SUB_CHUNK_DATA);
+    }
+
+    public @Nullable FoundRectangle findClosestPortal(BlockPos center, WorldBorder worldborder) {
+        if (LuminaConfig.configModule().performance.cacheNetherPortalFind && cache.containsKey(center)) {
+            return cache.get(center);
+        }
+        SectionPos centerSubChunk = SectionPos.of(center);
+        if (centerSubChunk.getY() > maxBuildSubChunkY) {
+            centerSubChunk = SectionPos.of(centerSubChunk.x(), maxBuildSubChunkY, centerSubChunk.z());
+        }
+        if (centerSubChunk.getY() < minBuildSubChunkY) {
+            centerSubChunk = SectionPos.of(centerSubChunk.x(), minBuildSubChunkY, centerSubChunk.z());
+        }
+        Set<SectionPos> now = new HashSet<>();
+        Set<SectionPos> all = new HashSet<>();
+        int n = 0;
+        now.add(centerSubChunk);
+        boolean shouldContinue = true;
+        FoundRectangle result = null;
+        BlockPos resultPos = null;
+        double nowDistanceSqr = Double.MAX_VALUE;
+        while (shouldContinue) {
+            n++;
+            shouldContinue = false;
+            Set<SectionPos> next = new HashSet<>();
+            for (SectionPos subChunkPos : now) {
+                all.add(subChunkPos);
+                ConcurrentMap<BlockPos, FoundRectangle> subChunkData = getSubChunkData(subChunkPos);
+                if (subChunkData != null) {
+                    for (BlockPos poi : subChunkData.keySet()) {
+                        if (!worldborder.isWithinBounds(poi) || (isNether && level.paperConfig()
+                                .environment
+                                .netherCeilingVoidDamageHeight
+                                .test(v -> poi.getY() >= v))) {
+                            continue;
+                        }
+                        if (poi.getX() - center.getX() > maxFindDistance
+                                || poi.getZ() - center.getZ() > maxFindDistance) {
+                            continue;
+                        }
+                        double distSqr = center.distSqr(poi);
+                        if (distSqr < nowDistanceSqr) {
+                            result = subChunkData.get(poi);
+                            resultPos = poi;
+                            nowDistanceSqr = distSqr;
+                        } else if (distSqr == nowDistanceSqr) {
+                            assert result != null; // if result is null, distance = Double.MAX_VALUE != nowDistance
+                            if (poi.getY() < resultPos.getY()) {
+                                result = subChunkData.get(poi);
+                            }
+                        }
+                    }
+                }
+                shouldContinue = addNeighborsToNext(subChunkPos, next, all, centerSubChunk) || shouldContinue;
+            }
+            now = next;
+            if (getMaxDistanceSqr(n) >= nowDistanceSqr) {
+                shouldContinue = false;
+            }
+        }
+        if (LuminaConfig.configModule().performance.cacheNetherPortalFind && result != null) {
+            cache.put(center, result);
+            reserveCache.computeIfAbsent(result, (k) -> ConcurrentHashMap.newKeySet()).add(center);
+            reserveAffectCache.computeIfAbsent(result, (k) -> ConcurrentHashMap.newKeySet()).addAll(all);
+            for (SectionPos subChunkPos : all) {
+                affectCache.computeIfAbsent(subChunkPos, (k) -> ConcurrentHashMap.newKeySet()).add(result);
+            }
+        }
+        return result;
+    }
+
+    private boolean addNeighborsToNext(@NotNull SectionPos subChunkPos, Set<SectionPos> next, Set<SectionPos> all, SectionPos center) {
+        boolean shouldContinue = addToNext(subChunkPos.above(), next, all, center);
+        shouldContinue = addToNext(subChunkPos.below(), next, all, center) || shouldContinue;
+        shouldContinue = addToNext(subChunkPos.north(), next, all, center) || shouldContinue;
+        shouldContinue = addToNext(subChunkPos.south(), next, all, center) || shouldContinue;
+        shouldContinue = addToNext(subChunkPos.east(), next, all, center) || shouldContinue;
+        return addToNext(subChunkPos.west(), next, all, center) || shouldContinue;
+    }
+
+    private boolean addToNext(SectionPos subChunkPos, Set<SectionPos> next, @NotNull Set<SectionPos> all, SectionPos center) {
+        if (!all.contains(subChunkPos)
+                && Math.abs(center.getX() - subChunkPos.getX()) <= maxFindSubChunkDistance
+                && Math.abs(center.getZ() - subChunkPos.getZ()) <= maxFindSubChunkDistance
+                && subChunkPos.getY() <= maxBuildSubChunkY
+                && subChunkPos.getY() >= minBuildSubChunkY) {
+            next.add(subChunkPos);
+            return true;
+        }
+        return false;
+    }
+
+    private int getMaxDistanceSqr(int n) {
+        if (n < 4) {
+            return n - 1;
+        }
+        if (isNether) {
+            return netherMaxDistanceSqrCache.computeIfAbsent(n, (i) -> 1 + pow(16 * (i - 3) + 1));
+        } else {
+            return overworldMaxDistanceSqrCache.computeIfAbsent(n, (i) -> {
+                int k = i / 3;
+                return switch (i - 3 * k) {
+                    case 0 -> 3 * pow(16 * (k - 1) + 1) - 1;
+                    case 1 -> pow(16 * k + 1) + 2 * pow(16 * (k - 1) + 1) - 1;
+                    case 2 -> 2 * pow(16 * k + 1) + 2 * pow(16 * (k - 1) + 1) - 1;
+                    default -> throw new RuntimeException("WTF");
+                };
+            });
+        }
+    }
+
+    private int pow(int a) {
+        return a * a;
+    }
+
+    private final ConcurrentMap<Integer, Integer> overworldMaxDistanceSqrCache = new ConcurrentHashMap<>();
+    private final ConcurrentMap<Integer, Integer> netherMaxDistanceSqrCache = new ConcurrentHashMap<>();
+}
