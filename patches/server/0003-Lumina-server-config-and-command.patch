From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7studio@foxmail.com>
Date: Thu, 11 Apr 2024 22:58:15 +0800
Subject: [PATCH] Lumina server config and command


diff --git a/src/main/java/org/leavesmc/lumina/config/modules/misc/RegionFormatConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/misc/RegionFormatConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..1f76044de5e9016a6ca1cba165bd27369e5aa4a4
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/misc/RegionFormatConfig.java
@@ -0,0 +1,58 @@
+package org.leavesmc.lumina.config.modules.misc;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import dev.kaiijumc.kaiiju.region.RegionFileFormat;
+import org.leavesmc.lumina.config.*;
+
+public class RegionFormatConfig implements IConfigModule {
+    @DoNotLoad
+    public static RegionFileFormat regionFormatName = RegionFileFormat.ANVIL;
+
+    @HotReloadUnsupported
+    @ConfigInfo(baseName = "formatName")
+    private static String formatName = "ANVIL";
+    @HotReloadUnsupported
+    @ConfigInfo(baseName = "linear_compression_level",comments = "WARNING: DO NOT USE TOO HIGH COMPRESSION LEVEL(Recommended is 1 which is default value if you are using linear) BECAUSE THAT WOULD MAKE YOUR DATA IN DANGER!")
+    public static int regionFormatLinearCompressionLevel = 1;
+    @HotReloadUnsupported
+    @ConfigInfo(baseName = "linear_flusher_thread_count")
+    public static int linearFlushThreads = 1;
+    @HotReloadUnsupported
+    @ConfigInfo(baseName = "linear_flush_frequency")
+    public static int linearFlushFrequency = 10;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.MISC;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "region_format";
+    }
+
+    @Override
+    public void onLoaded(CommentedFileConfig configInstance){
+        if (LuminaConfig.alreadyInited){
+            return;
+        }
+
+        regionFormatName = RegionFileFormat.fromString(formatName);
+        if (regionFormatName.equals(RegionFileFormat.INVALID)) {
+            LuminaConfig.logger.error("Unknown region format in lumina global config: {}", formatName);
+            LuminaConfig.logger.error("Falling back to ANVIL region file format.");
+            regionFormatName = RegionFileFormat.ANVIL;
+        }
+
+        if (regionFormatLinearCompressionLevel > 23 || regionFormatLinearCompressionLevel < 1) {
+            LuminaConfig.logger.error("Linear region compression level should be between 1 and 22 in lumina global config: {}", regionFormatLinearCompressionLevel);
+            LuminaConfig.logger.error("Falling back to compression level 1.");
+            regionFormatLinearCompressionLevel = 1;
+        }
+
+        if (linearFlushThreads < 0)
+            linearFlushThreads = Math.max(Runtime.getRuntime().availableProcessors() + linearFlushThreads, 1);
+        else
+            linearFlushThreads = Math.max(linearFlushThreads, 1);
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/AsyncPathProcessingConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/AsyncPathProcessingConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..b820393564cda6d4b3062b441cb3a2e3e4523489
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/AsyncPathProcessingConfig.java
@@ -0,0 +1,35 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class AsyncPathProcessingConfig implements IConfigModule {
+    @ConfigInfo(baseName = "enabled")
+    public static boolean asyncPathProcessing = false;
+    @ConfigInfo(baseName = "max_threads")
+    public static int asyncPathProcessingMaxThreads = 0;
+    @ConfigInfo(baseName = "keep_alive_time")
+    public static int asyncPathProcessingKeepalive = 60;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "async_path_processing";
+    }
+
+    @Override
+    public void onLoaded(CommentedFileConfig config){
+        if (asyncPathProcessingMaxThreads < 0)
+            asyncPathProcessingMaxThreads = Math.max(Runtime.getRuntime().availableProcessors() + asyncPathProcessingMaxThreads, 1);
+        else if (asyncPathProcessingMaxThreads == 0)
+            asyncPathProcessingMaxThreads = Math.max(Runtime.getRuntime().availableProcessors() / 4, 1);
+        if (!asyncPathProcessing)
+            asyncPathProcessingMaxThreads = 0;
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityDABConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityDABConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..cef4718d0eb4a8c80b81d806b96fb4210b7468df
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityDABConfig.java
@@ -0,0 +1,60 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.DoNotLoad;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.EntityType;
+import java.util.Collections;
+import java.util.List;
+
+public class EntityDABConfig implements IConfigModule {
+    @ConfigInfo(baseName = "enabled")
+    public static boolean dearEnabled = false;
+    @ConfigInfo(baseName = "start_distance",comments =
+            "This value determines how far away an entity has to be\n" +
+                    " from the player to start being effected by DEAR."
+    )
+    public static int startDistance = 12;
+    @DoNotLoad
+    public static int startDistanceSquared;
+    @ConfigInfo(baseName = "max-tick-freq",comments =
+            "This value defines how often in ticks, the furthest entity\n"+
+                    "will get their pathfinders and behaviors ticked. 20 = 1s")
+    public static int maximumActivationPrio = 20;
+    @ConfigInfo(baseName = "activation-dist-mod",comments =
+                                """
+                                This value defines how much distance modifies an entity's
+                                tick frequency. freq = (distanceToPlayer^2) / (2^value)
+                                If you want further away entities to tick less often, use 7.
+                                If you want further away entities to tick more often, try 9.""")
+    public static int activationDistanceMod;
+    @ConfigInfo(baseName = "blacklisted-entities")
+    public static List<String> blackedEntities = Collections.emptyList();
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "dab";
+    }
+
+    @Override
+    public void onLoaded(CommentedFileConfig config) {
+        for (EntityType<?> entityType : BuiltInRegistries.ENTITY_TYPE) {
+            entityType.dabEnabled = true; // reset all, before setting the ones to true
+        }
+
+        blackedEntities.forEach(name -> EntityType.byString(name).ifPresentOrElse(entityType -> {
+                    entityType.dabEnabled = false;
+                    }, () -> MinecraftServer.LOGGER.warn("Unknown entity \"" + name + "\"")));
+
+        config.setComment("optimizations.dab", "Optimizes entity brains when\n" + "they're far away from the player");
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityGoalSelectorInactiveTickConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityGoalSelectorInactiveTickConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d3d26a620ffd4cac1748e0c2416e2ec2bfb0191
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityGoalSelectorInactiveTickConfig.java
@@ -0,0 +1,20 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class EntityGoalSelectorInactiveTickConfig implements IConfigModule {
+    @ConfigInfo(baseName = "enabled")
+    public static boolean enabled = false;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "skip_goal_selector_tick_in_inactive_tick";
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityTTLOptimizationConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityTTLOptimizationConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..d35cdac24c1b0b1c0b7d2ae0573972f0ad998650
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/EntityTTLOptimizationConfig.java
@@ -0,0 +1,38 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.world.entity.EntityType;
+
+import java.util.Locale;
+
+public class EntityTTLOptimizationConfig implements IConfigModule {
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "entity_time_outs";
+    }
+
+    @Override
+    public void onLoaded(CommentedFileConfig config) {
+        // Set some defaults
+        this.get("optimizations.entity_timeouts.SNOWBALL", -1,config);
+        this.get("optimizations.entity_timeouts.LLAMA_SPIT", -1,config);
+        config.setComment("optimizations.entity_timeouts",
+                """
+                        These values define a entity's maximum lifespan. If an
+                        entity is in this list and it has survived for longer than
+                        that number of ticks, then it will be removed. Setting a value to
+                        -1 disables this feature.""");
+        for (EntityType<?> entityType : BuiltInRegistries.ENTITY_TYPE) {
+            String type = EntityType.getKey(entityType).getPath().toUpperCase(Locale.ROOT);
+            entityType.ttl = this.get("optimizations.entity_timeouts." + type, -1,config);
+        }
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/GaleVariableEntityWakeupConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/GaleVariableEntityWakeupConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc6ebacec69258adf151f97ffdac4e6e592ef38f
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/GaleVariableEntityWakeupConfig.java
@@ -0,0 +1,20 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class GaleVariableEntityWakeupConfig implements IConfigModule {
+    @ConfigInfo(baseName = "entity_wakeup_duration_ratio_standard_deviation")
+    public static double entityWakeUpDurationRatioStandardDeviation = 0.2;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "variable_entity_waking_up";
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/LoadChunksToActiveClimbingEntitiesConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/LoadChunksToActiveClimbingEntitiesConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..22129ece829add8d6f98c0ad37a64a9a29c249f7
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/LoadChunksToActiveClimbingEntitiesConfig.java
@@ -0,0 +1,20 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class LoadChunksToActiveClimbingEntitiesConfig implements IConfigModule {
+    @ConfigInfo(baseName = "allow")
+    public static boolean allow = false;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "load_chunks_to_active_climbing_entities";
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/ProjectileChunkReduceConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/ProjectileChunkReduceConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..7e596a92b7663895f88661bd2d414eeb6b75f808
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/ProjectileChunkReduceConfig.java
@@ -0,0 +1,22 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class ProjectileChunkReduceConfig implements IConfigModule {
+    @ConfigInfo(baseName = "max-loads-per-tick")
+    public static int maxProjectileLoadsPerTick;
+    @ConfigInfo(baseName = "max-loads-per-projectile")
+    public static int maxProjectileLoadsPerProjectile;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "projectile";
+    }
+}
diff --git a/src/main/java/org/leavesmc/lumina/config/modules/optimizations/SuffocationOptimizationConfig.java b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/SuffocationOptimizationConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..5bdcaf214476d38aecc7059ae252a67efd859475
--- /dev/null
+++ b/src/main/java/org/leavesmc/lumina/config/modules/optimizations/SuffocationOptimizationConfig.java
@@ -0,0 +1,20 @@
+package org.leavesmc.lumina.config.modules.optimizations;
+
+import org.leavesmc.lumina.config.ConfigInfo;
+import org.leavesmc.lumina.config.EnumConfigCategory;
+import org.leavesmc.lumina.config.IConfigModule;
+
+public class SuffocationOptimizationConfig implements IConfigModule {
+    @ConfigInfo(baseName = "enabled")
+    public static boolean enabled = false;
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.OPTIMIZATIONS;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "suffocation_optimization";
+    }
+}
