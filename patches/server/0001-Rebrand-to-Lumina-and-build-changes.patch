From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7studio@foxmail.com>
Date: Thu, 11 Apr 2024 22:58:15 +0800
Subject: [PATCH] Rebrand to Lumina and build changes


diff --git a/build.gradle.kts b/build.gradle.kts
index 905262067dabc7cbe5b08639fcefd3a996a937e0..1838e0a0efcde5eb791d88c09916fa9b66716a26 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,9 +1,9 @@
 import io.papermc.paperweight.util.*
+import java.time.Instant
 
 plugins {
     java
     `maven-publish`
-    id("com.github.johnrengelman.shadow")
 }
 
 val log4jPlugins = sourceSets.create("log4jPlugins")
@@ -14,11 +14,20 @@ val alsoShade: Configuration by configurations.creating
 
 dependencies {
     // Folia start
-    implementation(project(":folia-api"))
+    implementation(project(":lumina-api")) // Lumina
     implementation("io.papermc.paper:paper-mojangapi:${project.version}") {
         exclude("io.papermc.paper", "paper-api")
     }
     // Folia end
+    // Lumina start - SpongePowered Configurate
+    implementation("org.spongepowered:configurate-hocon:4.1.2")
+    implementation("org.spongepowered:configurate-yaml:4.1.2")
+    implementation("org.spongepowered:configurate-gson:4.1.2")
+    // Lumina end - SpongePowered Configurate/
+    // Kaiiju start - Linear format
+    implementation("com.github.luben:zstd-jni:1.5.4-1")
+    implementation("org.lz4:lz4-java:1.8.0")
+    // Kaiiju end
     // Paper start
     implementation("org.jline:jline-terminal-jansi:3.21.0")
     implementation("net.minecrell:terminalconsoleappender:1.3.0")
@@ -62,27 +71,37 @@ dependencies {
     testImplementation("org.junit-pioneer:junit-pioneer:2.2.0") // Paper - CartesianTest
 }
 
-val craftbukkitPackageVersion = "1_20_R3" // Paper
+
+paperweight {
+    craftBukkitPackageVersion.set("v1_20_R4") // also needs to be updated in MappingEnvironment
+}
+
 tasks.jar {
     archiveClassifier.set("dev")
 
     manifest {
         val git = Git(rootProject.layout.projectDirectory.path)
+        val mcVersion = rootProject.providers.gradleProperty("mcVersion").get()
+        val build = System.getenv("BUILD_NUMBER") ?: null
         val gitHash = git("rev-parse", "--short=7", "HEAD").getText().trim()
-        val implementationVersion = System.getenv("BUILD_NUMBER") ?: "\"$gitHash\""
+        val implementationVersion = "$mcVersion-${build ?: "DEV"}-$gitHash"
         val date = git("show", "-s", "--format=%ci", gitHash).getText().trim() // Paper
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
-            "Implementation-Version" to "git-Folia-$implementationVersion", // Folia
+            "Implementation-Version" to implementationVersion, /// Lumina
             "Implementation-Vendor" to date, // Paper
-            "Specification-Title" to "Bukkit",
+            "Specification-Title" to "Folia", // Lumina
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "Bukkit Team",
+            "Specification-Vendor" to "LeavesMC Team",
+            "Brand-Id" to "papermc:folia", // Folia
+            "Brand-Name" to "Folia", // Folia
+            "Build-Number" to (build ?: ""),
+            "Build-Time" to Instant.now().toString(),
             "Git-Branch" to gitBranch, // Paper
             "Git-Commit" to gitHash, // Paper
-            "CraftBukkit-Package-Version" to craftbukkitPackageVersion, // Paper
+            "CraftBukkit-Package-Version" to paperweight.craftBukkitPackageVersion.get(), // Paper
         )
         for (tld in setOf("net", "com", "org")) {
             attributes("$tld/bukkit", "Sealed" to true)
@@ -103,52 +122,32 @@ tasks.compileTestJava {
 
 publishing {
     publications.create<MavenPublication>("maven") {
-        artifact(tasks.shadowJar)
-    }
-}
-
-relocation {
-    // Order matters here - e.g. craftbukkit proper must be relocated before any of the libs are relocated into the cb package
-    relocate("org.bukkit.craftbukkit" to "org.bukkit.craftbukkit.v$craftbukkitPackageVersion") {
-        exclude("org.bukkit.craftbukkit.Main*")
-    }
-}
-
-tasks.shadowJar {
-    configurations = listOf(project.configurations.vanillaServer.get(), alsoShade)
-    archiveClassifier.set("mojang-mapped")
-
-    for (relocation in relocation.relocations.get()) {
-        relocate(relocation.fromPackage, relocation.toPackage) {
-            for (exclude in relocation.excludes) {
-                exclude(exclude)
-            }
-        }
     }
 }
 
 // Paper start
 val scanJar = tasks.register("scanJarForBadCalls", io.papermc.paperweight.tasks.ScanJarForBadCalls::class) {
     badAnnotations.add("Lio/papermc/paper/annotation/DoNotUse;")
-    jarToScan.set(tasks.shadowJar.flatMap { it.archiveFile })
+    jarToScan.set(tasks.serverJar.flatMap { it.archiveFile })
     classpath.from(configurations.compileClasspath)
 }
 tasks.check {
     dependsOn(scanJar)
 }
 // Paper end
-
-// Paper start - include reobf mappings in jar for stacktrace deobfuscation
-val includeMappings = tasks.register<io.papermc.paperweight.tasks.IncludeMappings>("includeMappings") {
-    inputJar.set(tasks.fixJarForReobf.flatMap { it.outputJar })
-    mappings.set(tasks.reobfJar.flatMap { it.mappingsFile })
-    mappingsDest.set("META-INF/mappings/reobf.tiny")
-}
-
-tasks.reobfJar {
-    inputJar.set(includeMappings.flatMap { it.outputJar })
+// Paper start - use TCA for console improvements
+tasks.serverJar {
+    from(alsoShade.elements.map {
+        it.map { f ->
+            if (f.asFile.isFile) {
+                zipTree(f.asFile)
+            } else {
+                f.asFile
+            }
+        }
+    })
 }
-// Paper end - include reobf mappings in jar for stacktrace deobfuscation
+// Paper end - use TCA for console improvements
 
 tasks.test {
     exclude("org/bukkit/craftbukkit/inventory/ItemStack*Test.class")
@@ -165,7 +164,11 @@ fun TaskContainer.registerRunTask(
     workingDir = rootProject.layout.projectDirectory
         .dir(providers.gradleProperty("paper.runWorkDir").getOrElse("run"))
         .asFile
-    javaLauncher.set(project.javaToolchains.defaultJavaLauncher(project))
+    javaLauncher.set(project.javaToolchains.launcherFor {
+        languageVersion.set(JavaLanguageVersion.of(21))
+        vendor.set(JvmVendorSpec.JETBRAINS)
+    })
+    jvmArgs("-XX:+AllowEnhancedClassRedefinition", "-XX:+AllowRedefinitionToAddDeleteMethods")
 
     if (rootProject.childProjects["test-plugin"] != null) {
         val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
@@ -196,26 +199,51 @@ val runtimeClasspathWithoutVanillaServer = configurations.runtimeClasspath.flatM
         runtime.filterNot { it.asFile.absolutePath == vanilla }
     }
 
-tasks.registerRunTask("runShadow") {
-    description = "Spin up a test server from the shadowJar archiveFile"
-    classpath(tasks.shadowJar.flatMap { it.archiveFile })
+
+tasks.registerRunTask("runServer") {
+    description = "Spin up a test server from the Mojang mapped server jar"
+    classpath(tasks.includeMappings.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
 }
 
-tasks.registerRunTask("runReobf") {
+tasks.registerRunTask("runReobfServer") {
     description = "Spin up a test server from the reobfJar output jar"
     classpath(tasks.reobfJar.flatMap { it.outputJar })
     classpath(runtimeClasspathWithoutVanillaServer)
 }
 
-val runtimeClasspathForRunDev = sourceSets.main.flatMap { src ->
-    src.runtimeClasspath.elements.map { elements ->
-        elements.filterNot { file -> file.asFile.endsWith("minecraft.jar") }
-    }
+tasks.registerRunTask("runDevServer") {
+    description = "Spin up a test server without assembling a jar"
+    classpath(sourceSets.main.map { it.runtimeClasspath })
+    jvmArgs("-DPaper.pushPaperAssetsRoot=true")
+}
+
+// Leaves start - create config file
+tasks.registerRunTask("createLuminaConfig") {
+    //TODO
+    description = "Create a new lumina.yml"
+    mainClass = "org.leavesmc.leaves.config.GlobalConfigCreator"
+    classpath(sourceSets.main.map { it.runtimeClasspath })
+}
+// Leaves end - create config file
+
+tasks.registerRunTask("runBundler") {
+    description = "Spin up a test server from the Mojang mapped bundler jar"
+    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createMojmapBundlerJar").flatMap { it.outputZip })
+    mainClass.set(null as String?)
+}
+tasks.registerRunTask("runReobfBundler") {
+    description = "Spin up a test server from the reobf bundler jar"
+    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreateBundlerJar>("createReobfBundlerJar").flatMap { it.outputZip })
+    mainClass.set(null as String?)
+}
+tasks.registerRunTask("runLeavesclip") {
+    description = "Spin up a test server from the Mojang mapped Leavesclip jar"
+    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createMojmapLeavesclipJar").flatMap { it.outputZip })
+    mainClass.set(null as String?)
 }
-tasks.registerRunTask("runDev") {
-    description = "Spin up a non-relocated Mojang-mapped test server"
-    classpath(tasks.filterProjectDir.flatMap { it.outputJar })
-    classpath(runtimeClasspathForRunDev)
-    jvmArgs("-DPaper.isRunDev=true")
+tasks.registerRunTask("runReobfLeavesclip") {
+    description = "Spin up a test server from the reobf Leavesclip jar"
+    classpath(rootProject.tasks.named<io.papermc.paperweight.tasks.CreatePaperclipJar>("createReobfLeavesclipJar").flatMap { it.outputZip })
+    mainClass.set(null as String?)
 }
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index cb60d58d4a7556dd896f31d0cd249f860bb3ef84..1c2eb695a2367fe34a8c9f720546a1510e28ce9c 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Folia", serverUUID, logFailedRequests, Bukkit.getLogger()); // Folia - we have our own bstats page
+                Metrics metrics = new Metrics("Lumina", serverUUID, logFailedRequests, Bukkit.getLogger()); // Folia - we have our own bstats page // Lumina
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -607,11 +607,11 @@ public class Metrics {
                 final String implVersion = org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion();
                 if (implVersion != null) {
                     final String buildOrHash = implVersion.substring(implVersion.lastIndexOf('-') + 1);
-                    paperVersion = "git-Folia-%s-%s".formatted(Bukkit.getServer().getMinecraftVersion(), buildOrHash); // Folia - we have our own bstats page
+                    paperVersion = "git-Lumina-%s-%s".formatted(Bukkit.getServer().getMinecraftVersion(), buildOrHash); // Folia - we have our own bstats page // Lumina
                 } else {
                     paperVersion = "unknown";
                 }
-                metrics.addCustomChart(new Metrics.SimplePie("folia_version", () -> paperVersion)); // Folia - we have our own bstats page
+                metrics.addCustomChart(new Metrics.SimplePie("lumina_version", () -> paperVersion)); // Folia - we have our own bstats page // Lumina
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index e2f704c115fd6e00960bb56bb0779f1100c89c17..754b4abf5af6d17de53b4dd6d1e09107ce572de2 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -20,7 +20,7 @@ import java.util.stream.StreamSupport;
 public class PaperVersionFetcher implements VersionFetcher {
     private static final java.util.regex.Pattern VER_PATTERN = java.util.regex.Pattern.compile("^([0-9\\.]*)\\-.*R"); // R is an anchor, will always give '-R' at end
     private static final String GITHUB_BRANCH_NAME = "master";
-    private static final String DOWNLOAD_PAGE = "https://papermc.io/downloads/paper";
+    private static final String DOWNLOAD_PAGE = "https://leavesmc.org/downloads/lumina"; // Lumina
     private static @Nullable String mcVer;
 
     @Override
@@ -31,8 +31,8 @@ public class PaperVersionFetcher implements VersionFetcher {
     @Nonnull
     @Override
     public Component getVersionMessage(@Nonnull String serverVersion) {
-        String[] parts = serverVersion.substring("git-Folia-".length()).split("[-\\s]"); // Folia
-        final Component updateMessage = getUpdateStatusMessage("PaperMC/Folia", GITHUB_BRANCH_NAME, parts[0]); // Folia
+        String[] parts = serverVersion.substring("git-Lumina-".length()).split("[-\\s]"); // Folia // Lumina
+        final Component updateMessage = getUpdateStatusMessage("LeavesMC/Lumina", GITHUB_BRANCH_NAME, parts[0]); // Folia // Lumina
         final Component history = getHistory();
 
         return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
@@ -85,7 +85,7 @@ public class PaperVersionFetcher implements VersionFetcher {
         if (siteApiVersion == null) { return -1; }
         try {
             try (BufferedReader reader = Resources.asCharSource(
-                new URL("https://api.papermc.io/v2/projects/folia/versions/" + siteApiVersion), // Folia
+                new URL("https://api.leavesmc.org/v2/projects/lumina/versions/" + siteApiVersion), // Folia // Lumina
                 Charsets.UTF_8
             ).openBufferedStream()) {
                 JsonObject json = new Gson().fromJson(reader, JsonObject.class);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d6a7188227cee9072976db98613324ee2d3dcdc8..825281dc7cfd332d8a0ea896eeb5578c1f216586 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1963,7 +1963,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Folia"; // Paper // Folia - Folia
+        return "Lumina"; // Paper // Folia - Folia // Lumina - Lumina
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9dd9e86a5f7f30ce37b906ebfe4bccad0e52577f..3a8cab3ae06e879cc0f2773b567f704f47eaf16d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -266,7 +266,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Folia"; // Folia // Paper
+    private final String serverName = "Lumina"; // Folia // Paper // Lumina
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index e9b6ca3aa25e140467ae866d572483050ea3fa0e..fbbf774f90b70ca94d0c3945ebc3616f7b321f22 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/dev.folia/folia-api/pom.properties"); // Folia
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.leavesmc.lumin/lumina-api/pom.properties"); // Folia // Lumina
         Properties properties = new Properties();
 
         if (stream != null) {
@@ -20,7 +20,7 @@ public final class Versioning {
 
                 result = properties.getProperty("version");
             } catch (IOException ex) {
-                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Bukkit version!", ex);
+                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Lumina version!", ex);
             }
         }
 
