From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MC_XiaoHei <xiaohei.xor7@outlook.com>
Date: Sat, 20 Jul 2024 00:06:04 +0800
Subject: [PATCH] Remove timings


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
deleted file mode 100644
index 4b467f1af93452d13829f756d55dee18b8889d40..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ /dev/null
@@ -1,181 +0,0 @@
-package co.aikar.timings;
-
-import com.google.common.collect.MapMaker;
-import io.papermc.paper.configuration.GlobalConfiguration;
-import net.minecraft.commands.functions.CommandFunction;
-import net.minecraft.network.protocol.Packet;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.scheduler.BukkitTask;
-
-import org.bukkit.craftbukkit.scheduler.CraftTask;
-
-import java.util.Map;
-
-// TODO: Re-implement missing timers
-@Deprecated(forRemoval = true)
-public final class MinecraftTimings {
-
-    public static final Timing serverOversleep = Timings.ofSafe("Server Oversleep");
-    public static final Timing playerListTimer = Timings.ofSafe("Player List");
-    public static final Timing commandFunctionsTimer = Timings.ofSafe("Command Functions");
-    public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
-    public static final Timing tickablesTimer = Timings.ofSafe("Tickables");
-    public static final Timing minecraftSchedulerTimer = Timings.ofSafe("Minecraft Scheduler");
-    public static final Timing bukkitSchedulerTimer = Timings.ofSafe("Bukkit Scheduler");
-    public static final Timing bukkitSchedulerPendingTimer = Timings.ofSafe("Bukkit Scheduler - Pending");
-    public static final Timing bukkitSchedulerFinishTimer = Timings.ofSafe("Bukkit Scheduler - Finishing");
-    public static final Timing chunkIOTickTimer = Timings.ofSafe("ChunkIOTick");
-    public static final Timing timeUpdateTimer = Timings.ofSafe("Time Update");
-    public static final Timing serverCommandTimer = Timings.ofSafe("Server Command");
-    public static final Timing savePlayers = Timings.ofSafe("Save Players");
-
-    public static final Timing tickEntityTimer = Timings.ofSafe("## tickEntity");
-    public static final Timing tickTileEntityTimer = Timings.ofSafe("## tickTileEntity");
-    public static final Timing packetProcessTimer = Timings.ofSafe("## Packet Processing");
-    public static final Timing scheduledBlocksTimer = Timings.ofSafe("## Scheduled Blocks");
-    public static final Timing structureGenerationTimer = Timings.ofSafe("Structure Generation");
-
-    public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
-    public static final Timing processTasksTimer = Timings.ofSafe("processTasks");
-
-    public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
-
-    public static final Timing entityActivationCheckTimer = Timings.ofSafe("entityActivationCheck");
-
-    public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
-    public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
-    public static final Timing scoreboardScoreSearch = Timings.ofSafe("Scoreboard score search"); // Paper - add timings for scoreboard search
-    public static final Timing distanceManagerTick = Timings.ofSafe("Distance Manager Tick"); // Paper - add timings for distance manager
-
-    public static final Timing midTickChunkTasks = Timings.ofSafe("Mid Tick Chunk Tasks");
-
-    private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
-
-    private MinecraftTimings() {}
-
-    public static Timing getInternalTaskName(String taskName) {
-        return Timings.ofSafe(taskName);
-    }
-
-    /**
-     * Gets a timer associated with a plugins tasks.
-     * @param bukkitTask
-     * @param period
-     * @return
-     */
-    public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
-        if (!bukkitTask.isSync()) {
-            return NullTimingHandler.NULL;
-        }
-        Plugin plugin;
-
-        CraftTask craftTask = (CraftTask) bukkitTask;
-
-        final Class<?> taskClass = craftTask.getTaskClass();
-        if (bukkitTask.getOwner() != null) {
-            plugin = bukkitTask.getOwner();
-        } else {
-            plugin = TimingsManager.getPluginByClassloader(taskClass);
-        }
-
-        final String taskname = taskNameCache.computeIfAbsent(taskClass, clazz -> {
-            try {
-                String clsName = !clazz.isMemberClass()
-                    ? clazz.getName()
-                    : clazz.getCanonicalName();
-                if (clsName != null && clsName.contains("$Lambda$")) {
-                    clsName = clsName.replaceAll("(Lambda\\$.*?)/.*", "$1");
-                }
-                return clsName != null ? clsName : "UnknownTask";
-            } catch (Throwable ex) {
-                new Exception("Error occurred detecting class name", ex).printStackTrace();
-                return "MangledClassFile";
-            }
-        });
-
-        StringBuilder name = new StringBuilder(64);
-        name.append("Task: ").append(taskname);
-        if (period > 0) {
-            name.append(" (interval:").append(period).append(")");
-        } else {
-            name.append(" (Single)");
-        }
-
-        if (plugin == null) {
-            return Timings.ofSafe(null, name.toString());
-        }
-
-        return Timings.ofSafe(plugin, name.toString());
-    }
-
-    /**
-     * Get a named timer for the specified entity type to track type specific timings.
-     * @param entityType
-     * @return
-     */
-    public static Timing getEntityTimings(String entityType, String type) {
-        return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType + " - " + type, tickEntityTimer);
-    }
-
-    public static Timing getBehaviorTimings(String type) {
-        return Timings.ofSafe("## Behavior - " + type);
-    }
-
-    public static Timing getSensorTimings(String type, int rate) {
-        return Timings.ofSafe("## Sensor - " + type + " (Default rate: " + rate + ")");
-    }
-
-    /**
-     * Get a named timer for the specified tile entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static Timing getTileEntityTimings(BlockEntity entity) {
-        String entityType = entity.getClass().getName();
-        return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
-    }
-    public static Timing getCancelTasksTimer() {
-        return Timings.ofSafe("Cancel Tasks");
-    }
-    public static Timing getCancelTasksTimer(Plugin plugin) {
-        return Timings.ofSafe(plugin, "Cancel Tasks");
-    }
-
-    public static void stopServer() {
-        TimingsManager.stopServer();
-    }
-
-    public static Timing getBlockTiming(Block block) {
-        return Timings.ofSafe("## Scheduled Block: " + block.toString(), scheduledBlocksTimer);
-    }
-/*
-    public static Timing getStructureTiming(StructureGenerator structureGenerator) {
-        return Timings.ofSafe("Structure Generator - " + structureGenerator.getName(), structureGenerationTimer);
-    }*/
-
-    public static Timing getPacketTiming(Packet packet) {
-        return Timings.ofSafe("## Packet - " + packet.getClass().getName(), packetProcessTimer);
-    }
-
-    public static Timing getCommandFunctionTiming(CommandFunction<?> function) {
-        return Timings.ofSafe("Command Function - " + function.id());
-    }
-
-    public static void processConfig(GlobalConfiguration.Timings config) {
-        TimingsManager.url = config.url;
-        if (!TimingsManager.url.endsWith("/")) {
-            TimingsManager.url += "/";
-        }
-        TimingsManager.privacy = config.serverNamePrivacy;
-        if (!config.hiddenConfigEntries.contains("proxies.velocity.secret")) {
-            config.hiddenConfigEntries.add("proxies.velocity.secret");
-        }
-        TimingsManager.hiddenConfigs.addAll(config.hiddenConfigEntries);
-        co.aikar.timings.Timings.setVerboseTimingsEnabled(config.verbose);
-        co.aikar.timings.Timings.setTimingsEnabled(config.enabled);
-        co.aikar.timings.Timings.setHistoryInterval(config.historyInterval * 20);
-        co.aikar.timings.Timings.setHistoryLength(config.historyLength * 20);
-    }
-}
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
deleted file mode 100644
index 7620c72a4c243cbeea245203ce03a97cbfa7d922..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ /dev/null
@@ -1,388 +0,0 @@
-/*
- * This file is licensed under the MIT License (MIT).
- *
- * Copyright (c) 2014 Daniel Ennis <http://aikar.co>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package co.aikar.timings;
-
-import com.google.common.collect.Sets;
-import io.papermc.paper.adventure.PaperAdventure;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
-import net.minecraft.server.MinecraftServer;
-import org.apache.commons.lang.StringUtils;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.configuration.MemorySection;
-import org.bukkit.entity.EntityType;
-import org.json.simple.JSONObject;
-import org.json.simple.JSONValue;
-import oshi.SystemInfo;
-import oshi.hardware.HardwareAbstractionLayer;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.lang.management.ManagementFactory;
-import java.lang.management.OperatingSystemMXBean;
-import java.lang.management.RuntimeMXBean;
-import java.net.HttpURLConnection;
-import java.net.InetAddress;
-import java.net.URL;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.logging.Level;
-import java.util.zip.GZIPOutputStream;
-
-import static co.aikar.timings.TimingsManager.HISTORY;
-import static co.aikar.util.JSONUtil.appendObjectData;
-import static co.aikar.util.JSONUtil.createObject;
-import static co.aikar.util.JSONUtil.pair;
-import static co.aikar.util.JSONUtil.toArray;
-import static co.aikar.util.JSONUtil.toArrayMapper;
-import static co.aikar.util.JSONUtil.toObjectMapper;
-import static net.kyori.adventure.text.Component.text;
-
-@SuppressWarnings({"rawtypes", "SuppressionAnnotation"})
-@Deprecated(forRemoval = true)
-public class TimingsExport extends Thread {
-
-    private final TimingsReportListener listeners;
-    private final Map out;
-    private final TimingHistory[] history;
-    private static long lastReport = 0;
-
-    private TimingsExport(TimingsReportListener listeners, Map out, TimingHistory[] history) {
-        super("Timings paste thread");
-        this.listeners = listeners;
-        this.out = out;
-        this.history = history;
-    }
-
-    /**
-     * Checks if any pending reports are being requested, and builds one if needed.
-     */
-    public static void reportTimings() {
-        if (Timings.requestingReport.isEmpty()) {
-            return;
-        }
-        TimingsReportListener listeners = new TimingsReportListener(Timings.requestingReport);
-        listeners.addConsoleIfNeeded();
-
-        Timings.requestingReport.clear();
-        long now = System.currentTimeMillis();
-        final long lastReportDiff = now - lastReport;
-        if (lastReportDiff < 60000) {
-            listeners.sendMessage(text("Please wait at least 1 minute in between Timings reports. (" + (int)((60000 - lastReportDiff) / 1000) + " seconds)", NamedTextColor.RED));
-            listeners.done();
-            return;
-        }
-        final long lastStartDiff = now - TimingsManager.timingStart;
-        if (lastStartDiff < 180000) {
-            listeners.sendMessage(text("Please wait at least 3 minutes before generating a Timings report. Unlike Timings v1, v2 benefits from longer timings and is not as useful with short timings. (" + (int)((180000 - lastStartDiff) / 1000) + " seconds)", NamedTextColor.RED));
-            listeners.done();
-            return;
-        }
-        listeners.sendMessage(text("Preparing Timings Report...", NamedTextColor.GREEN));
-        lastReport = now;
-        Map parent = createObject(
-            // Get some basic system details about the server
-            pair("version", Bukkit.getVersion()),
-            pair("maxplayers", Bukkit.getMaxPlayers()),
-            pair("start", TimingsManager.timingStart / 1000),
-            pair("end", System.currentTimeMillis() / 1000),
-            pair("online-mode", Bukkit.getServer().getOnlineMode()),
-            pair("sampletime", (System.currentTimeMillis() - TimingsManager.timingStart) / 1000),
-            pair("datapacks", toArrayMapper(MinecraftServer.getServer().getPackRepository().getSelectedPacks(), pack -> {
-                return PlainTextComponentSerializer.plainText().serialize(PaperAdventure.asAdventure(pack.getChatLink(true)));
-            }))
-        );
-        if (!TimingsManager.privacy) {
-            appendObjectData(parent,
-                pair("server", Bukkit.getUnsafe().getTimingsServerName()),
-                pair("motd", Bukkit.getServer().getMotd()),
-                pair("icon", Bukkit.getServer().getServerIcon().getData())
-            );
-        }
-
-        final Runtime runtime = Runtime.getRuntime();
-        RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
-
-        OperatingSystemMXBean osInfo = ManagementFactory.getOperatingSystemMXBean();
-
-        HardwareAbstractionLayer hardwareInfo = new SystemInfo().getHardware();
-
-        parent.put("system", createObject(
-                pair("timingcost", getCost()),
-                pair("loadavg", osInfo.getSystemLoadAverage()),
-                pair("name", System.getProperty("os.name")),
-                pair("version", System.getProperty("os.version")),
-                pair("jvmversion", System.getProperty("java.version")),
-                pair("jvmvendor", System.getProperty("java.vendor")),
-                pair("jvmvendorversion", System.getProperty("java.vendor.version")),
-                pair("arch", System.getProperty("os.arch")),
-                pair("maxmem", runtime.maxMemory()),
-                pair("memory", createObject(
-                    pair("heap", ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().toString()),
-                    pair("nonheap", ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().toString()),
-                    pair("finalizing", ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount())
-                )),
-                pair("cpu", runtime.availableProcessors()),
-                pair("cpuname", hardwareInfo.getProcessor().getProcessorIdentifier().getName().trim()),
-                pair("runtime", runtimeBean.getUptime()),
-                pair("flags", StringUtils.join(runtimeBean.getInputArguments(), " ")),
-                pair("gc", toObjectMapper(ManagementFactory.getGarbageCollectorMXBeans(), input -> pair(input.getName(), toArray(input.getCollectionCount(), input.getCollectionTime()))))
-            )
-        );
-
-        parent.put("worlds", toObjectMapper(MinecraftServer.getServer().getAllLevels(), world -> {
-            if (world.getWorld().getName().equals("worldeditregentempworld")) return null;
-            return pair(world.getWorld().getName(), createObject(
-                pair("gamerules", toObjectMapper(world.getWorld().getGameRules(), rule -> {
-                    return pair(rule, world.getWorld().getGameRuleValue(rule));
-                })),
-                pair("ticking-distance", world.getWorld().getSimulationDistance()),
-                pair("no-ticking-distance", world.getWorld().getViewDistance()),
-                pair("sending-distance", world.getWorld().getSendViewDistance())
-            ));
-        }));
-
-        Set<Material> tileEntityTypeSet = Sets.newHashSet();
-        Set<EntityType> entityTypeSet = Sets.newHashSet();
-
-        int size = HISTORY.size();
-        TimingHistory[] history = new TimingHistory[size + 1];
-        int i = 0;
-        for (TimingHistory timingHistory : HISTORY) {
-            tileEntityTypeSet.addAll(timingHistory.tileEntityTypeSet);
-            entityTypeSet.addAll(timingHistory.entityTypeSet);
-            history[i++] = timingHistory;
-        }
-
-        history[i] = new TimingHistory(); // Current snapshot
-        tileEntityTypeSet.addAll(history[i].tileEntityTypeSet);
-        entityTypeSet.addAll(history[i].entityTypeSet);
-
-
-        Map handlers = createObject();
-        Map groupData;
-        synchronized (TimingIdentifier.GROUP_MAP) {
-            for (TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {
-                synchronized (group.handlers) {
-                    for (TimingHandler id : group.handlers) {
-
-                        if (!id.isTimed() && !id.isSpecial()) {
-                            continue;
-                        }
-
-                        String name = id.identifier.name;
-                        if (name.startsWith("##")) {
-                            name = name.substring(3);
-                        }
-                        handlers.put(id.id, toArray(
-                            group.id,
-                            name
-                        ));
-                    }
-                }
-            }
-
-            groupData = toObjectMapper(
-                TimingIdentifier.GROUP_MAP.values(), group -> pair(group.id, group.name));
-        }
-
-        parent.put("idmap", createObject(
-            pair("groups", groupData),
-            pair("handlers", handlers),
-            pair("worlds", toObjectMapper(TimingHistory.worldMap.entrySet(), input -> pair(input.getValue(), input.getKey()))),
-            pair("tileentity",
-                toObjectMapper(tileEntityTypeSet, input -> pair(input.ordinal(), input.name()))),
-            pair("entity",
-                toObjectMapper(entityTypeSet, input -> pair(input.ordinal(), input.name())))
-        ));
-
-        // Information about loaded plugins
-
-        parent.put("plugins", toObjectMapper(Bukkit.getPluginManager().getPlugins(),
-                plugin -> pair(plugin.getName(), createObject(
-                    pair("version", plugin.getDescription().getVersion()),
-                    pair("description", String.valueOf(plugin.getDescription().getDescription()).trim()),
-                    pair("website", plugin.getDescription().getWebsite()),
-                    pair("authors", StringUtils.join(plugin.getDescription().getAuthors(), ", "))
-                ))));
-
-
-
-        // Information on the users Config
-
-        parent.put("config", createObject(
-            pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
-            pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
-        ));
-
-        new TimingsExport(listeners, parent, history).start();
-    }
-
-    static long getCost() {
-        // Benchmark the users System.nanotime() for cost basis
-        int passes = 100;
-        TimingHandler SAMPLER1 = Timings.ofSafe("Timings Sampler 1");
-        TimingHandler SAMPLER2 = Timings.ofSafe("Timings Sampler 2");
-        TimingHandler SAMPLER3 = Timings.ofSafe("Timings Sampler 3");
-        TimingHandler SAMPLER4 = Timings.ofSafe("Timings Sampler 4");
-        TimingHandler SAMPLER5 = Timings.ofSafe("Timings Sampler 5");
-        TimingHandler SAMPLER6 = Timings.ofSafe("Timings Sampler 6");
-
-        long start = System.nanoTime();
-        for (int i = 0; i < passes; i++) {
-            SAMPLER1.startTiming();
-            SAMPLER2.startTiming();
-            SAMPLER3.startTiming();
-            SAMPLER3.stopTiming();
-            SAMPLER4.startTiming();
-            SAMPLER5.startTiming();
-            SAMPLER6.startTiming();
-            SAMPLER6.stopTiming();
-            SAMPLER5.stopTiming();
-            SAMPLER4.stopTiming();
-            SAMPLER2.stopTiming();
-            SAMPLER1.stopTiming();
-        }
-        long timingsCost = (System.nanoTime() - start) / passes / 6;
-        SAMPLER1.reset(true);
-        SAMPLER2.reset(true);
-        SAMPLER3.reset(true);
-        SAMPLER4.reset(true);
-        SAMPLER5.reset(true);
-        SAMPLER6.reset(true);
-        return timingsCost;
-    }
-
-    private static JSONObject mapAsJSON(ConfigurationSection config, String parentKey) {
-
-        JSONObject object = new JSONObject();
-        for (String key : config.getKeys(false)) {
-            String fullKey = (parentKey != null ? parentKey + "." + key : key);
-            if (fullKey.equals("database") || fullKey.equals("settings.bungeecord-addresses") || TimingsManager.hiddenConfigs.contains(fullKey) || key.startsWith("seed-") || key.equals("worldeditregentempworld") || key.equals("feature-seeds")) {
-                continue;
-            }
-            final Object val = config.get(key);
-
-            object.put(key, valAsJSON(val, fullKey));
-        }
-        return object;
-    }
-
-    private static Object valAsJSON(Object val, final String parentKey) {
-        if (!(val instanceof MemorySection)) {
-            if (val instanceof List) {
-                Iterable<Object> v = (Iterable<Object>) val;
-                return toArrayMapper(v, input -> valAsJSON(input, parentKey));
-            } else {
-                return String.valueOf(val);
-            }
-        } else {
-            return mapAsJSON((ConfigurationSection) val, parentKey);
-        }
-    }
-
-    @Override
-    public void run() {
-        out.put("data", toArrayMapper(history, TimingHistory::export));
-
-
-        String response = null;
-        String timingsURL = null;
-        try {
-            HttpURLConnection con = (HttpURLConnection) new URL(TimingsManager.url + "post").openConnection();
-            con.setDoOutput(true);
-            String hostName = "BrokenHost";
-            try {
-                hostName = InetAddress.getLocalHost().getHostName();
-            } catch (Exception ignored) {}
-            con.setRequestProperty("User-Agent", "Paper/" + Bukkit.getUnsafe().getTimingsServerName() + "/" + hostName);
-            con.setRequestMethod("POST");
-            con.setInstanceFollowRedirects(false);
-
-            OutputStream request = new GZIPOutputStream(con.getOutputStream()) {{
-                this.def.setLevel(7);
-            }};
-
-            request.write(JSONValue.toJSONString(out).getBytes("UTF-8"));
-            request.close();
-
-            response = getResponse(con);
-
-            if (con.getResponseCode() != 302) {
-                listeners.sendMessage(text( "Upload Error: " + con.getResponseCode() + ": " + con.getResponseMessage(), NamedTextColor.RED));
-                listeners.sendMessage(text("Check your logs for more information", NamedTextColor.RED));
-                if (response != null) {
-                    Bukkit.getLogger().log(Level.SEVERE, response);
-                }
-                return;
-            }
-
-            timingsURL = con.getHeaderField("Location");
-            listeners.sendMessage(text("View Timings Report: ", NamedTextColor.GREEN).append(text(timingsURL).clickEvent(ClickEvent.clickEvent(ClickEvent.Action.OPEN_URL, timingsURL))));
-
-            if (response != null && !response.isEmpty()) {
-                Bukkit.getLogger().log(Level.INFO, "Timing Response: " + response);
-            }
-        } catch (IOException ex) {
-            listeners.sendMessage(text("Error uploading timings, check your logs for more information", NamedTextColor.RED));
-            if (response != null) {
-                Bukkit.getLogger().log(Level.SEVERE, response);
-            }
-            Bukkit.getLogger().log(Level.SEVERE, "Could not paste timings", ex);
-        } finally {
-            this.listeners.done(timingsURL);
-        }
-    }
-
-    private String getResponse(HttpURLConnection con) throws IOException {
-        InputStream is = null;
-        try {
-            is = con.getInputStream();
-            ByteArrayOutputStream bos = new ByteArrayOutputStream();
-
-            byte[] b = new byte[1024];
-            int bytesRead;
-            while ((bytesRead = is.read(b)) != -1) {
-                bos.write(b, 0, bytesRead);
-            }
-            return bos.toString();
-
-        } catch (IOException ex) {
-            listeners.sendMessage(text("Error uploading timings, check your logs for more information", NamedTextColor.RED));
-            Bukkit.getLogger().log(Level.WARNING, con.getResponseMessage(), ex);
-            return null;
-        } finally {
-            if (is != null) {
-                is.close();
-            }
-        }
-    }
-}
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
deleted file mode 100644
index 22687667ec69a954261e55e59261286ac1b8b8cd..0000000000000000000000000000000000000000
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package co.aikar.timings;
-
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.world.level.Level;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-
-/**
- * Set of timers per world, to track world specific timings.
- */
-// TODO: Re-implement missing timers
-@Deprecated(forRemoval = true)
-public class WorldTimingsHandler {
-    public final Timing mobSpawn;
-    public final Timing doChunkUnload;
-    public final Timing doPortalForcer;
-    public final Timing scheduledBlocks;
-    public final Timing scheduledBlocksCleanup;
-    public final Timing scheduledBlocksTicking;
-    public final Timing chunkTicks;
-    public final Timing lightChunk;
-    public final Timing chunkTicksBlocks;
-    public final Timing doVillages;
-    public final Timing doChunkMap;
-    public final Timing doChunkMapUpdate;
-    public final Timing doChunkMapToUpdate;
-    public final Timing doChunkMapSortMissing;
-    public final Timing doChunkMapSortSendToPlayers;
-    public final Timing doChunkMapPlayersNeedingChunks;
-    public final Timing doChunkMapPendingSendToPlayers;
-    public final Timing doChunkMapUnloadChunks;
-    public final Timing doChunkGC;
-    public final Timing doSounds;
-    public final Timing entityRemoval;
-    public final Timing entityTick;
-    public final Timing tileEntityTick;
-    public final Timing tileEntityPending;
-    public final Timing tracker1;
-    public final Timing tracker2;
-    public final Timing doTick;
-    public final Timing tickEntities;
-    public final Timing chunks;
-    public final Timing newEntities;
-    public final Timing raids;
-    public final Timing chunkProviderTick;
-    public final Timing broadcastChunkUpdates;
-    public final Timing countNaturalMobs;
-
-    public final Timing chunkLoad;
-    public final Timing chunkLoadPopulate;
-    public final Timing syncChunkLoad;
-    public final Timing chunkLoadLevelTimer;
-    public final Timing chunkIO;
-    public final Timing chunkPostLoad;
-    public final Timing worldSave;
-    public final Timing worldSaveChunks;
-    public final Timing worldSaveLevel;
-    public final Timing chunkSaveData;
-
-
-    public final Timing miscMobSpawning;
-
-    public final Timing poiUnload;
-    public final Timing chunkUnload;
-    public final Timing poiSaveDataSerialization;
-    public final Timing chunkSave;
-    public final Timing chunkSaveDataSerialization;
-    public final Timing chunkSaveIOWait;
-    public final Timing chunkUnloadPrepareSave;
-    public final Timing chunkUnloadPOISerialization;
-    public final Timing chunkUnloadDataSave;
-
-    public WorldTimingsHandler(Level server) {
-        String name = ((PrimaryLevelData) server.getLevelData()).getLevelName() + " - ";
-
-        mobSpawn = Timings.ofSafe(name + "mobSpawn");
-        doChunkUnload = Timings.ofSafe(name + "doChunkUnload");
-        scheduledBlocks = Timings.ofSafe(name + "Scheduled Blocks");
-        scheduledBlocksCleanup = Timings.ofSafe(name + "Scheduled Blocks - Cleanup");
-        scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
-        chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
-        lightChunk = Timings.ofSafe(name + "Light Chunk");
-        chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
-        doVillages = Timings.ofSafe(name + "doVillages");
-        doChunkMap = Timings.ofSafe(name + "doChunkMap");
-        doChunkMapUpdate = Timings.ofSafe(name + "doChunkMap - Update");
-        doChunkMapToUpdate = Timings.ofSafe(name + "doChunkMap - To Update");
-        doChunkMapSortMissing = Timings.ofSafe(name + "doChunkMap - Sort Missing");
-        doChunkMapSortSendToPlayers = Timings.ofSafe(name + "doChunkMap - Sort Send To Players");
-        doChunkMapPlayersNeedingChunks = Timings.ofSafe(name + "doChunkMap - Players Needing Chunks");
-        doChunkMapPendingSendToPlayers = Timings.ofSafe(name + "doChunkMap - Pending Send To Players");
-        doChunkMapUnloadChunks = Timings.ofSafe(name + "doChunkMap - Unload Chunks");
-        doSounds = Timings.ofSafe(name + "doSounds");
-        doChunkGC = Timings.ofSafe(name + "doChunkGC");
-        doPortalForcer = Timings.ofSafe(name + "doPortalForcer");
-        entityTick = Timings.ofSafe(name + "entityTick");
-        entityRemoval = Timings.ofSafe(name + "entityRemoval");
-        tileEntityTick = Timings.ofSafe(name + "tileEntityTick");
-        tileEntityPending = Timings.ofSafe(name + "tileEntityPending");
-
-        chunkLoad = Timings.ofSafe(name + "Chunk Load");
-        chunkLoadPopulate = Timings.ofSafe(name + "Chunk Load - Populate");
-        syncChunkLoad = Timings.ofSafe(name + "Sync Chunk Load");
-        chunkLoadLevelTimer = Timings.ofSafe(name + "Chunk Load - Load Level");
-        chunkIO = Timings.ofSafe(name + "Chunk Load - DiskIO");
-        chunkPostLoad = Timings.ofSafe(name + "Chunk Load - Post Load");
-        worldSave = Timings.ofSafe(name + "World Save");
-        worldSaveLevel = Timings.ofSafe(name + "World Save - Level");
-        worldSaveChunks = Timings.ofSafe(name + "World Save - Chunks");
-        chunkSaveData = Timings.ofSafe(name + "Chunk Save - Data");
-
-        tracker1 = Timings.ofSafe(name + "tracker stage 1");
-        tracker2 = Timings.ofSafe(name + "tracker stage 2");
-        doTick = Timings.ofSafe(name + "doTick");
-        tickEntities = Timings.ofSafe(name + "tickEntities");
-
-        chunks = Timings.ofSafe(name + "Chunks");
-        newEntities = Timings.ofSafe(name + "New entity registration");
-        raids = Timings.ofSafe(name + "Raids");
-        chunkProviderTick = Timings.ofSafe(name + "Chunk provider tick");
-        broadcastChunkUpdates = Timings.ofSafe(name + "Broadcast chunk updates");
-        countNaturalMobs = Timings.ofSafe(name + "Count natural mobs");
-
-
-        miscMobSpawning = Timings.ofSafe(name + "Mob spawning - Misc");
-
-        poiUnload = Timings.ofSafe(name + "Chunk unload - POI");
-        chunkUnload = Timings.ofSafe(name + "Chunk unload - Chunk");
-        poiSaveDataSerialization = Timings.ofSafe(name + "Chunk save - POI Data serialization");
-        chunkSave = Timings.ofSafe(name + "Chunk save - Chunk");
-        chunkSaveDataSerialization = Timings.ofSafe(name + "Chunk save - Chunk Data serialization");
-        chunkSaveIOWait = Timings.ofSafe(name + "Chunk save - Chunk IO Wait");
-        chunkUnloadPrepareSave = Timings.ofSafe(name + "Chunk unload - Async Save Prepare");
-        chunkUnloadPOISerialization = Timings.ofSafe(name + "Chunk unload - POI Data Serialization");
-        chunkUnloadDataSave = Timings.ofSafe(name + "Chunk unload - Data Serialization");
-    }
-
-    public static Timing getTickList(ServerLevel worldserver, String timingsType) {
-        return Timings.ofSafe(((PrimaryLevelData) worldserver.getLevelData()).getLevelName() + " - Scheduled " + timingsType);
-    }
-}
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index 0d8b2a4127e8c8e4970d220b8a2240490da6e7df..d8fa66c96a11c71fe021d54816002c60d640e1ed 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -1463,11 +1463,9 @@ public final class ChunkHolderManager {
 
     public boolean processTicketUpdates() {
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
-        co.aikar.timings.MinecraftTimings.distanceManagerTick.startTiming(); try { // Paper - add timings for distance manager
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TICKET_LEVEL_UPDATE_PROCESSING); try { // Folia - profiler
         return this.processTicketUpdates(true, true, null);
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TICKET_LEVEL_UPDATE_PROCESSING); } // Folia - profiler
-        } finally { co.aikar.timings.MinecraftTimings.distanceManagerTick.stopTiming(); } // Paper - add timings for distance manager
     }
 
     private static final ThreadLocal<List<ChunkProgressionTask>> CURRENT_TICKET_UPDATE_SCHEDULING = new ThreadLocal<>();
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index e46def6929f95828abc9b0e16e4c98c142490433..78a49fc5dc55213098415bcf470fc04549191a96 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1781,7 +1781,6 @@ public final class NewChunkHolder {
         boolean canSavePOI = !(chunk instanceof LevelChunk levelChunk && levelChunk.mustNotSave) && (poi != null && poi.isDirty());
         boolean canSaveEntities = entities != null;
 
-        try (co.aikar.timings.Timing ignored = this.world.timings.chunkSave.startTiming()) { // Paper
             if (canSaveChunk) {
                 canSaveChunk = this.saveChunk(chunk, unloading);
             }
@@ -1795,7 +1794,6 @@ public final class NewChunkHolder {
                     this.lastEntityUnload = null;
                 }
             }
-        }
 
         return executedUnloadTask | canSaveChunk | canSaveEntities | canSavePOI ? new SaveStat(executedUnloadTask || canSaveChunk, canSaveEntities, canSavePOI): null;
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_SAVE); } // Folia - profiler
diff --git a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
index 0c3c82b28e581286b798ee58ca4193efc2faff4a..fe6a5a6377bcb577b21471ae93639f8dc5fa0f39 100644
--- a/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
+++ b/src/main/java/io/papermc/paper/command/brigadier/bukkit/BukkitCommandNode.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.command.brigadier.bukkit;
 
-import co.aikar.timings.Timing;
 import com.mojang.brigadier.arguments.StringArgumentType;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
@@ -78,18 +77,11 @@ public class BukkitCommandNode extends LiteralCommandNode<CommandSourceStack> {
         public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
             CommandSender sender = context.getSource().getSender();
 
-            // Plugins do weird things to workaround normal registration
-            if (this.command.timings == null) {
-                this.command.timings = co.aikar.timings.TimingsManager.getCommandTiming(null, this.command);
-            }
-
             String content = context.getRange().get(context.getInput());
             String[] args = org.apache.commons.lang3.StringUtils.split(content, ' '); // fix adjacent spaces (from console/plugins) causing empty array elements
 
-            try (Timing ignored = this.command.timings.startTiming()) {
-                // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
-                this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
-            }
+            // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
+            this.command.execute(sender, this.literal, Arrays.copyOfRange(args, 1, args.length));
 
             // return true as command was handled
             return 1;
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index d7ba88f8b3e380392717b5a283c9f2cfa4d14325..b0ea3ecb8cfec0a19250745aa6d0d0bdd9951246 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.configuration;
 
-import co.aikar.timings.MinecraftTimings;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.configuration.constraint.Constraints;
 import io.papermc.paper.configuration.type.number.IntOr;
@@ -91,29 +90,6 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean useDisplayNameInQuitMessage = false;
     }
 
-    @Deprecated(forRemoval = true)
-    public Timings timings;
-
-    @Deprecated(forRemoval = true)
-    public class Timings extends ConfigurationPart {
-        public boolean enabled = true;
-        public boolean verbose = true;
-        public String url = "https://timings.aikar.co/";
-        public boolean serverNamePrivacy = false;
-        public List<String> hiddenConfigEntries = List.of(
-            "database",
-            "proxies.velocity.secret"
-        );
-        public int historyInterval = 300;
-        public int historyLength = 3600;
-        public String serverName = "Unknown Server";
-
-        @PostProcess
-        private void postProcess() {
-            MinecraftTimings.processConfig(this);
-        }
-    }
-
     public Proxies proxies;
 
     public class Proxies extends ConfigurationPart {
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..a1c9726d25479b5326fe2fa2b0f5a98d6b2da4c5 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -1,6 +1,5 @@
 package io.papermc.paper.plugin.manager;
 
-import co.aikar.timings.TimedEventExecutor;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerEventException;
 import com.google.common.collect.Sets;
@@ -95,7 +94,6 @@ class PaperEventManager {
             throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
         }
 
-        executor = new TimedEventExecutor(executor, plugin, null, event);
         this.getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
     }
 
@@ -182,7 +180,7 @@ class PaperEventManager {
                 }
             }
 
-            EventExecutor executor = new TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass);
+            EventExecutor executor = EventExecutor.create(method, eventClass);
             eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
         }
         return ret;
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
index 097500a59336db1bbfffcd1aa4cff7a8586e46ec..35b00c139864dd7925d46a2d6a317d7e3aae9638 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginManagerImpl.java
@@ -232,7 +232,7 @@ public class PaperPluginManagerImpl implements PluginManager, DependencyContext
 
     @Override
     public boolean useTimings() {
-        return co.aikar.timings.Timings.isTimingsEnabled();
+        return false;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index 662a9e4f48cfc314b9d619a813122b1ac67273fd..e7ee0a879c10234194eed381b3e6ea26701ff091 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -50,8 +50,7 @@ public class PacketUtils {
                 try { // Paper - detailed watchdog information
                 if (listener instanceof ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // CraftBukkit - Don't handle sync packets for kicked players
                 if (listener.shouldHandleMessage(packet)) {
-                    co.aikar.timings.Timing timing = co.aikar.timings.MinecraftTimings.getPacketTiming(packet); // Paper - timings
-                    try (co.aikar.timings.Timing ignored = timing.startTiming()) { // Paper - timings
+                    try {
                         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
                         final int packetTimerId = profiler.getOrCreateTimerAndStart(() -> "Packet Handler: ".concat(io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(packet.getClass().getName()))); try { // Folia - profiler
                         packet.handle(listener);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 355c8408da189a4805e206db0932c41f940930f0..0afc3d90f7531b8e216f30f0989d04c3461b6a02 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -3,9 +3,6 @@ package net.minecraft.server;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -190,8 +187,6 @@ import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
-
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
 
     private static MinecraftServer SERVER; // Paper
@@ -1041,7 +1036,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         MinecraftServer.LOGGER.info("Stopping server");
         Commands.COMMAND_SENDING_POOL.shutdownNow(); // Paper - Perf: Async command map building; Shutdown and don't bother finishing
-        MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -1528,8 +1522,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             return;
         }
 
-        co.aikar.timings.MinecraftTimings.midTickChunkTasks.startTiming();
-        try {
             for (;;) {
                 boolean moreTasks = this.tickMidTickTasks(worldData); // Folia - region threading
                 long currTime = System.nanoTime();
@@ -1554,9 +1546,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     return;
                 }
             }
-        } finally {
-            co.aikar.timings.MinecraftTimings.midTickChunkTasks.stopTiming();
-        }
     }
     // Paper end - execute chunk tasks mid tick
 
@@ -1653,16 +1642,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         };
         new com.destroystokyo.paper.event.server.ServerTickStartEvent((int)region.getCurrentTick()).callEvent(); // Paper
         // Folia end - region threading
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         long i = startTime; // Folia - region threading
 
         // Paper start - move oversleep into full server tick
         if (region == null) { // Folia - region threading
-        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        isOversleep = true;
         this.managedBlock(() -> {
             return !this.canOversleep();
         });
-        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        isOversleep = false;
         } // Folia - region threading
         // Paper end
         // Folia - region threading - move up
@@ -1729,7 +1717,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end - Incremental chunk and player saving
         io.papermc.paper.util.CachedLists.reset(); // Paper
         // Paper start - move executeAll() into full server tick timing
-        if (region == null) try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) { // Folia - region threading
+        if (region == null) { // Folia - region threading
             this.runAllTasks();
         }
         // Paper end
@@ -1742,7 +1730,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Folia - region threading
         this.profiler.pop();
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
     private void logTickMethodTime(long tickStartTime) {
@@ -1803,26 +1790,19 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (region == null) this.getPlayerList().getPlayers().forEach((entityplayer) -> { // Folia - region threading
             entityplayer.connection.suspendFlushing();
         });
-        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
         // Folia - region threading
-        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
         // Folia - region threading - moved to global tick - and moved entity scheduler to tickRegion
         this.profiler.push("commandFunctions");
-        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
         if (region == null) this.getFunctions().tick(); // Folia - region threading - TODO Purge functions
-        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         this.profiler.popPush("levels");
         //Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; moved down
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
         if (region == null) while (!this.processQueue.isEmpty()) { // Folia - region threading
             this.processQueue.remove().run();
         }
-        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
-        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - Perf: Optimize time updates
         for (final ServerLevel level : (region == null ? this.getAllLevels() : Arrays.asList(region.world))) { // Folia - region threading
@@ -1842,7 +1822,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             }
         }
         // Paper end - Perf: Optimize time updates
-        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
 
         if (region == null) this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked // Folia - region threading
         Iterator iterator = region == null ? this.getAllLevels().iterator() : Arrays.asList(region.world).iterator(); // Paper - Throw exception on world create while being ticked; move down // Folia - region threading
@@ -1866,7 +1845,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.profiler.push("tick");
 
             try {
-                worldserver.timings.doTick.startTiming(); // Spigot
                 profiler.startTimer(worldserver.tickTimerId); try { // Folia - profiler
                 worldserver.tick(shouldKeepTicking, region); // Folia - region threading
                 // Paper start
@@ -1875,7 +1853,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 }
                 // Paper end
                 } finally { profiler.stopTimer(worldserver.tickTimerId); } // Folia - profiler
-                worldserver.timings.doTick.stopTiming(); // Spigot
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
 
@@ -1890,27 +1867,21 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (region == null) this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked // Folia - region threading
 
         this.profiler.popPush("connection");
-        MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper
         if (region == null) this.getConnection().tick(); // Folia - region threading
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CONNECTION_TICK); try { // Folia - profiler
         if (region != null) regionizedWorldData.tickConnections(); // Folia - region threading
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CONNECTION_TICK); } // Folia - profiler
-        MinecraftTimings.connectionTimer.stopTiming(); // Spigot // Paper
         this.profiler.popPush("players");
-        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
         if (false) this.playerList.tick(); // Folia - region threading
-        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
         if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
         this.profiler.popPush("server gui refresh");
 
-        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         if (region == null) for (int i = 0; i < this.tickables.size(); ++i) {  // Folia - region threading - TODO WTF is this?
             ((Runnable) this.tickables.get(i)).run();
         }
-        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
         this.profiler.popPush("send chunks");
         iterator = this.playerList.getPlayers().iterator();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 43cb38e765a4650df6f8840de0481e2bf9ac3550..a96e3bfc7f937debf285755652dc17acef3ea977 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -63,7 +63,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.craftbukkit.util.TerminalCompletionHandler;
 import org.bukkit.craftbukkit.util.TerminalConsoleWriterThread;
 import org.bukkit.event.server.ServerCommandEvent;
@@ -515,7 +514,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     }
 
     public void handleConsoleInputs() {
-        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
         // Paper start - Perf: use proper queue
         ConsoleInput servercommand;
         while ((servercommand = this.serverCommandQueue.poll()) != null) {
@@ -532,7 +530,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             // CraftBukkit end
         }
 
-        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     @Override
@@ -806,21 +803,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
             // Paper start
             command.set(event.getCommand());
-            if (event.getCommand().toLowerCase(java.util.Locale.ROOT).startsWith("timings") && event.getCommand().toLowerCase(java.util.Locale.ROOT).matches("timings (report|paste|get|merged|seperate)")) {
-                org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
-                Waitable<String> waitable = new Waitable<>() {
-                    @Override
-                    protected String evaluate() {
-                        return sender.getBuffer();
-                    }
-                };
-                waitableArray[0] = waitable;
-                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
-            } else {
             // Paper end
             ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
             this.server.dispatchServerCommand(event.getSender(), serverCommand);
-            } // Paper
         }; // Folia start - region threading
         java.util.concurrent.CompletableFuture
             .runAsync(sync, io.papermc.paper.threadedregions.RegionizedServer.getInstance()::addTask)
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index c547d51eebd965f2be7ac45bc0981626c0515ef1..b3e2a8024baf94c45a9c369ee96b715448cf9eec 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.level;
 
-import co.aikar.timings.Timing; // Paper
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
@@ -469,19 +468,15 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
         ProfilerFiller gameprofilerfiller = this.level.getProfiler();
 
-        try (Timing ignored = this.level.timings.poiUnload.startTiming()) { // Paper
         gameprofilerfiller.push("poi");
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.POI_MANAGER_TICK); try { // Folia - profiler
         this.poiManager.tick(shouldKeepTicking);
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.POI_MANAGER_TICK); } // Folia - profiler
-        } // Paper
         gameprofilerfiller.popPush("chunk_unload");
         if (!this.level.noSave()) {
-            try (Timing ignored = this.level.timings.chunkUnload.startTiming()) { // Paper
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.PROCESS_UNLOADS); try { // Folia - profiler
             this.processUnloads(shouldKeepTicking);
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.PROCESS_UNLOADS); } // Folia - profiler
-            } // Paper
         }
 
         gameprofilerfiller.pop();
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 69feb8ee4dd959554a6fb9ccae78e32870b0e7b3..494e32eb9304e1ecfb71eb5d59de40557c01c0de 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -223,10 +223,8 @@ public class ServerChunkCache extends ChunkSource {
             if (!completablefuture.isDone()) { // Paper
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
                 com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x, z); // Paper - Add debug for sync chunk loads
-                this.level.timings.syncChunkLoad.startTiming(); // Paper
             chunkproviderserver_b.managedBlock(completablefuture::isDone);
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - rewrite chunk system
-                this.level.timings.syncChunkLoad.stopTiming(); // Paper
             } // Paper
             ChunkResult<ChunkAccess> chunkresult = (ChunkResult) completablefuture.join();
             ChunkAccess ichunkaccess1 = (ChunkAccess) chunkresult.orElse(null); // CraftBukkit - decompile error
@@ -375,17 +373,13 @@ public class ServerChunkCache extends ChunkSource {
 
     public void save(boolean flush) {
         this.runDistanceManagerUpdates();
-        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
         this.chunkMap.saveAllChunks(flush);
-        } // Paper - Timings
     }
 
     // Paper start - Incremental chunk and player saving; duplicate save, but call incremental
     public void saveIncrementally() {
         this.runDistanceManagerUpdates();
-        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
-            this.chunkMap.saveIncrementally();
-        } // Paper - Timings
+        this.chunkMap.saveIncrementally();
     }
     // Paper end - Incremental chunk and player saving
 
@@ -423,7 +417,6 @@ public class ServerChunkCache extends ChunkSource {
     public void tick(BooleanSupplier shouldKeepTicking, boolean tickChunks) {
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
         this.level.getProfiler().push("purge");
-        this.level.timings.doChunkMap.startTiming(); // Spigot
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_HOLDER_MANAGER_TICK); try { // Folia - profiler
         if (this.level.tickRateManager().runsNormally() || !tickChunks || this.level.spigotConfig.unloadFrozenChunks) { // Spigot
             this.distanceManager.purgeStaleTickets();
@@ -431,24 +424,19 @@ public class ServerChunkCache extends ChunkSource {
 
         this.runDistanceManagerUpdates();
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_HOLDER_MANAGER_TICK); } // Folia - profiler
-        this.level.timings.doChunkMap.stopTiming(); // Spigot
         this.level.getProfiler().popPush("chunks");
         if (tickChunks) {
-            this.level.timings.chunks.startTiming(); // Paper - timings
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.PLAYER_CHUNK_LOADER_TICK); try { // Folia - profiler
             this.chunkMap.level.playerChunkLoader.tick(); // Paper - replace player chunk loader - this is mostly required to account for view distance changes
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.PLAYER_CHUNK_LOADER_TICK); } // Folia - profiler
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_TICK); try { // Folia - profiler
             this.tickChunks();
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_TICK); } // Folia - profiler
-            this.level.timings.chunks.stopTiming(); // Paper - timings
             this.chunkMap.tick();
         }
 
-        this.level.timings.doChunkUnload.startTiming(); // Spigot
         this.level.getProfiler().popPush("unload");
         this.chunkMap.tick(shouldKeepTicking);
-        this.level.timings.doChunkUnload.stopTiming(); // Spigot
         this.level.getProfiler().pop();
         this.clearCache();
     }
@@ -465,14 +453,8 @@ public class ServerChunkCache extends ChunkSource {
 
             gameprofilerfiller.push("pollingChunks");
             gameprofilerfiller.push("filteringLoadedChunks");
-            // Paper - optimise chunk tick iteration
-            if (this.level.getServer().tickRateManager().runsNormally()) this.level.timings.chunkTicks.startTiming(); // Paper
-
-            // Paper - optimise chunk tick iteration
-
             if (this.level.tickRateManager().runsNormally()) {
                 gameprofilerfiller.popPush("naturalSpawnCount");
-                this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
                 int k = this.distanceManager.getNaturalSpawnChunkCount();
                 // Paper start - Optional per player mob spawns
                 int naturalSpawnChunkCount = k;
@@ -499,7 +481,6 @@ public class ServerChunkCache extends ChunkSource {
                 }
                 } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.MOB_SPAWN_ENTITY_COUNT); } // Folia - profiler
                 // Paper end - Optional per player mob spawns
-                this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings
 
                 regionizedWorldData.lastSpawnState = spawnercreature_d; // Folia - region threading
                 gameprofilerfiller.popPush("spawnAndTick");
@@ -616,22 +597,16 @@ public class ServerChunkCache extends ChunkSource {
                     }
                 }
                 // Paper end - optimise chunk tick iteration
-                this.level.timings.chunkTicks.stopTiming(); // Paper
 
                 gameprofilerfiller.popPush("customSpawners");
                 if (flag) {
                     profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.MISC_MOB_SPAWN_TICK); try { // Folia - profiler
-                    try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings
                     this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
-                    } // Paper - timings
                     } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.MISC_MOB_SPAWN_TICK); } // Folia - profiler
                 }
             }
 
             gameprofilerfiller.popPush("broadcast");
-            // Paper - optimise chunk tick iteration
-                this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timing
-            // Paper start - optimise chunk tick iteration
             // Folia start - region threading
             if (!this.level.needsChangeBroadcasting.isEmpty()) {
                 profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.BROADCAST_BLOCK_CHANGES); try { // Folia - profiler
@@ -649,9 +624,6 @@ public class ServerChunkCache extends ChunkSource {
                 } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.BROADCAST_BLOCK_CHANGES); } // Folia - profiler
             }
             // Folia end - region threading
-            // Paper end - optimise chunk tick iteration
-                this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timing
-            // Paper - optimise chunk tick iteration
             gameprofilerfiller.pop();
             gameprofilerfiller.pop();
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index b194f3448b5199e1204da31e1408f2e80803a77d..0b11aa29ac8cb4f65ace8b63ef1fd5a214139f3d 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1,7 +1,6 @@
 package net.minecraft.server.level;
 
 import com.google.common.annotations.VisibleForTesting;
-import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
@@ -923,7 +922,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         gameprofilerfiller.popPush("tickPending");
-        this.timings.scheduledBlocks.startTiming(); // Paper
         if (!this.isDebug() && flag) {
             j = regionizedWorldData.getRedstoneGameTime(); // Folia - region threading
             gameprofilerfiller.push("blockTicks");
@@ -936,30 +934,23 @@ public class ServerLevel extends Level implements WorldGenLevel {
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.FLUID_TICK); } // Folia - profiler
             gameprofilerfiller.pop();
         }
-        this.timings.scheduledBlocks.stopTiming(); // Paper
 
         gameprofilerfiller.popPush("raid");
         if (flag) {
-            this.timings.raids.startTiming(); // Paper - timings
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.RAIDS_TICK); try { // Folia - profiler
             this.raids.tick();
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.RAIDS_TICK); } // Folia - profiler
-            this.timings.raids.stopTiming(); // Paper - timings
         }
 
         gameprofilerfiller.popPush("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_PROVIDER_TICK); try { // Folia - profiler
         this.getChunkSource().tick(shouldKeepTicking, true);
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.CHUNK_PROVIDER_TICK); } // Folia - profiler
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
         gameprofilerfiller.popPush("blockEvents");
         if (flag) {
-            this.timings.doSounds.startTiming(); // Spigot
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.BLOCK_EVENT_TICK); try { // Folia - profiler
             this.runBlockEvents();
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.BLOCK_EVENT_TICK); } // Folia - profiler
-            this.timings.doSounds.stopTiming(); // Spigot
         }
 
         regionizedWorldData.setHandlingTick(false); // Folia - regionised ticking
@@ -972,7 +963,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         if (flag1 || this.emptyTime++ < 300) {
             gameprofilerfiller.push("entities");
-            this.timings.tickEntities.startTiming(); // Spigot
             if (this.dragonFight != null && flag) {
                 profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.DRAGON_FIGHT_TICK); try { // Folia - profiler
                 if (io.papermc.paper.util.TickThread.isTickThreadFor(this, this.dragonFight.origin)) { // Folia - region threading
@@ -991,7 +981,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
             }
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            this.timings.entityTick.startTiming(); // Spigot
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.ENTITY_TICK); try { // Folia - profiler
             regionizedWorldData.forEachTickingEntity((entity) -> { // Folia - regionised ticking
                 if (!entity.isRemoved()) {
@@ -1021,8 +1010,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 }
             });
             } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.ENTITY_TICK); } // Folia - profiler
-            this.timings.entityTick.stopTiming(); // Spigot
-            this.timings.tickEntities.stopTiming(); // Spigot
             gameprofilerfiller.pop();
             profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TILE_ENTITY); try { // Folia - profiler
             this.tickBlockEntities();
@@ -1174,7 +1161,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } // Paper - Option to disable ice and snow
 
         gameprofilerfiller.popPush("tickBlocks");
-        timings.chunkTicksBlocks.startTiming(); // Paper
         if (randomTickSpeed > 0) {
             // Paper start - optimize random block ticking
             LevelChunkSection[] sections = chunk.getSections();
@@ -1208,7 +1194,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
         // Paper end - optimise random block ticking
 
-        timings.chunkTicksBlocks.stopTiming(); // Paper
         gameprofilerfiller.pop();
     }
 
@@ -1530,9 +1515,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 currentlyTickingEntity.lazySet(entity);
             }
             // Paper end - log detailed entity tick information
-        ++TimingHistory.entityTicks; // Paper - timings
         // Spigot start
-        co.aikar.timings.Timing timer; // Paper
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
             timer = entity.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
@@ -1541,9 +1524,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             return;
         }*/ // Paper - comment out EAR 2
         // Spigot end
-        // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-        timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper
         // Folia start - timer
         final int timerId = isActive ? entity.getType().tickTimerId : entity.getType().inactiveTickTimerId;
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler();
@@ -1560,7 +1541,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
         });
         gameprofilerfiller.incrementCounter("tickNonPassenger");
         if (isActive) { // Paper - EAR 2
-            TimingHistory.activatedEntityTicks++;
         entity.tick();
         // Folia start - region threading
         if (!io.papermc.paper.util.TickThread.isTickThreadFor(entity)) {
@@ -1574,7 +1554,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Folia end - region threading
         } else { entity.inactiveTick(); } // Paper - EAR 2
         this.getProfiler().pop();
-        } finally { timer.stopTiming(); profiler.stopTimer(timerId); } // Paper - timings // Folia - timer
+        } finally { profiler.stopTimer(timerId); } // Folia - timer
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1597,7 +1577,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (passenger instanceof Player || this.getCurrentWorldData().hasEntityTickingEntity(passenger)) { // Folia - region threading
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
-                co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper
                 // Folia start - timer
                 final int timerId = isActive ? passenger.getType().tickTimerId : passenger.getType().inactiveTickTimerId;
                 final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler();
@@ -1642,7 +1621,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     this.tickPassenger(passenger, entity2);
                 }
 
-            } finally { timer.stopTiming(); profiler.stopTimer(timerId); }// Paper - EAR2 timings // Folia - timer
+            } finally { profiler.stopTimer(timerId); }/// Folia - timer
             }
         } else {
             passenger.stopRiding();
@@ -1661,27 +1640,23 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (doFull) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
         }
-
-        try (co.aikar.timings.Timing ignored = this.timings.worldSave.startTiming()) {
-            if (doFull) {
+         if (doFull) {
                 this.saveLevelData(true); // Paper - Write SavedData IO async
             }
 
-            this.timings.worldSaveChunks.startTiming(); // Paper
             if (!this.noSave()) chunkproviderserver.saveIncrementally();
-            this.timings.worldSaveChunks.stopTiming(); // Paper
 
-            // Copied from save()
-            // CraftBukkit start - moved from MinecraftServer.saveChunks
-            if (doFull) { // Paper
-                ServerLevel worldserver1 = this;
+        // Copied from save()
+        // CraftBukkit start - moved from MinecraftServer.saveChunks
+        if (doFull) { // Paper
+            ServerLevel worldserver1 = this;
 
-                this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
-                this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save(this.registryAccess()));
-                this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
-            }
-            // CraftBukkit end
+            this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
+            this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save(this.registryAccess()));
+            this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
         }
+        // CraftBukkit end
+
     }
     // Paper end - Incremental chunk and player saving
 
@@ -1695,7 +1670,6 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         if (!savingDisabled) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(this.getWorld())); // CraftBukkit
-            try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
             if (progressListener != null) {
                 progressListener.progressStartNoAbort(Component.translatable("menu.savingLevel"));
             }
@@ -1705,14 +1679,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
 
-                timings.worldSaveChunks.startTiming(); // Paper
             if (!close) chunkproviderserver.save(flush); // Paper - rewrite chunk system
             if (close) chunkproviderserver.close(true); // Paper - rewrite chunk system
-                timings.worldSaveChunks.stopTiming(); // Paper
             }// Paper
             // Paper - rewrite chunk system - entity saving moved into ChunkHolder
 
-        } else if (close) { chunkproviderserver.close(false); } // Paper - rewrite chunk system
+        else if (close) { chunkproviderserver.close(false); } // Paper - rewrite chunk system
 
         // Folia - move into saveLevelData
     }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 771b259ce930d2c857a08ca9150a243679c88c80..a230f81bb39f2362ae11858e9e8b69b939149726 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,5 @@
 package net.minecraft.server.players;
 
-import co.aikar.timings.MinecraftTimings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1335,7 +1334,6 @@ public abstract class PlayerList {
     public void saveAll(int interval) {
         io.papermc.paper.util.MCUtil.ensureMain("Save Players" , () -> { // Paper - Ensure main
         final ca.spottedleaf.leafprofiler.RegionizedProfiler.Handle profiler = io.papermc.paper.threadedregions.TickRegionScheduler.getProfiler(); // Folia - profiler
-        MinecraftTimings.savePlayers.startTiming(); // Paper
         int numSaved = 0;
         long now = System.nanoTime(); // Folia - region threading
         int max = io.papermc.paper.configuration.GlobalConfiguration.get().playerAutoSave.maxPerTick(); // Folia - region threading
@@ -1357,7 +1355,6 @@ public abstract class PlayerList {
             }
             // Paper end - Incremental chunk and player saving
         }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
         return null; }); // Paper - ensure main
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index a2f0fb8b4057bd3a84d18298e49c4d02955240d3..c837edbaca336842bc196c1f6efeee9e5b17768c 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -350,10 +350,6 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         this(factory, spawnGroup, saveable, summonable, fireImmune, spawnableFarFromPlayer, canSpawnInside, dimensions, spawnBoxScale, maxTrackDistance, trackTickInterval, requiredFeatures, "custom");
     }
     public EntityType(EntityType.EntityFactory<T> factory, MobCategory spawnGroup, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, ImmutableSet<Block> canSpawnInside, EntityDimensions dimensions, float spawnBoxScale, int maxTrackDistance, int trackTickInterval, FeatureFlagSet requiredFeatures, String id) {
-        this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
-        this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick");
-        this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
-        this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
         // Paper end
         // Folia start - profiler
         this.tickTimerId = ca.spottedleaf.leafprofiler.LProfilerRegistry.GLOBAL_REGISTRY.getOrCreateTimer("Entity Tick: " + id);
@@ -713,12 +709,6 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         return this.updateInterval;
     }
 
-    // Paper start - timings
-    public final co.aikar.timings.Timing tickTimer;
-    public final co.aikar.timings.Timing inactiveTickTimer;
-    public final co.aikar.timings.Timing passengerTickTimer;
-    public final co.aikar.timings.Timing passengerInactiveTickTimer;
-    // Paper end
     public boolean trackDeltas() {
         return this != EntityType.PLAYER && this != EntityType.LLAMA_SPIT && this != EntityType.WITHER && this != EntityType.BAT && this != EntityType.ITEM_FRAME && this != EntityType.GLOW_ITEM_FRAME && this != EntityType.LEASH_KNOT && this != EntityType.PAINTING && this != EntityType.END_CRYSTAL && this != EntityType.EVOKER_FANGS;
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ed628d38136534b3391c0a06b9c892a922710235..0edc4c5e64bdfe4de396425b23234839f1ec855e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -150,7 +150,6 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class LivingEntity extends Entity implements Attackable {
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 9379dd4056018b52c93ed4888dcdc94579bd9691..ba951cc1aaa94b58ee7985f197d41cc8be747fc8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -16,7 +16,6 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     private final int maxDuration;
     // Paper start - configurable behavior tick rate and timings
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
     // Paper end - configurable behavior tick rate and timings
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState) {
@@ -38,7 +37,6 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
         // Paper end - configurable behavior tick rate and timings
     }
 
@@ -59,9 +57,7 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
             this.status = Behavior.Status.RUNNING;
             int i = this.minDuration + world.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
             this.endTimestamp = time + (long)i;
-            this.timing.startTiming(); // Paper - behavior timings
             this.start(world, entity, time);
-            this.timing.stopTiming(); // Paper - behavior timings
             return true;
         } else {
             return false;
@@ -73,13 +69,11 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
 
     @Override
     public final void tickOrStop(ServerLevel world, E entity, long time) {
-        this.timing.startTiming(); // Paper - behavior timings
         if (!this.timedOut(time) && this.canStillUse(world, entity, time)) {
             this.tick(world, entity, time);
         } else {
             this.doStop(world, entity, time);
         }
-        this.timing.stopTiming(); // Paper - behavior timings
     }
 
     protected void tick(ServerLevel world, E entity, long time) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 85b4b24361e785acf75571ff98f924c00ae80748..1f3e0392f88a7cb3fb5c0767cdd1b4bc4ffcae4e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -28,7 +28,6 @@ public abstract class Sensor<E extends LivingEntity> {
     private long timeToTick;
     // Paper start - configurable sensor tick rate and timings
     private final String configKey;
-    private final co.aikar.timings.Timing timing;
     // Paper end
 
     public Sensor(int senseInterval) {
@@ -39,7 +38,6 @@ public abstract class Sensor<E extends LivingEntity> {
             key = key.substring(lastSeparator + 1);
         }
         this.configKey = key.toLowerCase(java.util.Locale.ROOT);
-        this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval);
         // Paper end
         this.scanRate = senseInterval;
         this.timeToTick = (long)RANDOM.nextInt(senseInterval);
@@ -53,10 +51,8 @@ public abstract class Sensor<E extends LivingEntity> {
         if (--this.timeToTick <= 0L) {
             // Paper start - configurable sensor tick rate and timings
             this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), this.scanRate);
-            this.timing.startTiming();
             // Paper end
             this.doTick(world, entity);
-            this.timing.stopTiming(); // Paper - sensor timings
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 75ecbdb5bdacb4d4b27d60fe1c1a35c3a9c16207..a0b61c77b23abec531b0b8f9b576fb4501067163 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -160,7 +160,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     // Paper end - add paper world config
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
-    public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
@@ -303,7 +302,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             public void onBorderSetDamageSafeZOne(WorldBorder border, double safeZoneRadius) {}
         });
         // CraftBukkit end
-        this.timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
         this.entityLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.tileMaxTickTime);
         this.chunkPacketBlockController = this.paperConfig().anticheat.antiXray.enabled ? new com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray(this, executor) : com.destroystokyo.paper.antixray.ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
@@ -1300,16 +1298,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         ProfilerFiller gameprofilerfiller = this.getProfiler();
 
         gameprofilerfiller.push("blockEntities");
-        this.timings.tileEntityPending.startTiming(); // Spigot
         final io.papermc.paper.threadedregions.RegionizedWorldData regionizedWorldData = this.getCurrentWorldData(); // Folia - regionised ticking
         regionizedWorldData.seTtickingBlockEntities(true); // Folia - regionised ticking
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TILE_ENTITY_PENDING); try { // Folia - profiler
         regionizedWorldData.pushPendingTickingBlockEntities(); // Folia - regionised ticking
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TILE_ENTITY_PENDING); } // Folia - profiler
         List<TickingBlockEntity> blockEntityTickers = regionizedWorldData.getBlockEntityTickers(); // Folia - regionised ticking
-        this.timings.tileEntityPending.stopTiming(); // Spigot
 
-        this.timings.tileEntityTick.startTiming(); // Spigot
         profiler.startTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TILE_ENTITY_TICK); try { // Folia - profiler
         // Spigot start
         // Iterator<TickingBlockEntity> iterator = this.blockEntityTickers.iterator();
@@ -1339,7 +1334,6 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075 // Folia - regionised ticking
         } finally { profiler.stopTimer(ca.spottedleaf.leafprofiler.LProfilerRegistry.TILE_ENTITY_TICK); } // Folia - profiler
 
-        this.timings.tileEntityTick.stopTiming(); // Spigot
         regionizedWorldData.seTtickingBlockEntities(false); // Folia - regionised ticking
         //co.aikar.timings.TimingHistory.tileEntityTicks += this.blockEntityTickers.size(); // Paper // Folia - region threading
         gameprofilerfiller.pop();
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index db64d88dc26f10304bd10f771f811fcbfaa34bc8..c9dd399ffa31283229c85d1f2ee52a2adf9f5a87 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -128,7 +128,6 @@ public final class NaturalSpawner {
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
         world.getProfiler().push("spawner");
-        world.timings.mobSpawn.startTiming(); // Spigot
         MobCategory[] aenumcreaturetype = NaturalSpawner.SPAWNING_CATEGORIES;
         int i = aenumcreaturetype.length;
 
@@ -181,7 +180,6 @@ public final class NaturalSpawner {
             }
         }
 
-        world.timings.mobSpawn.stopTiming(); // Spigot
         world.getProfiler().pop();
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index b266cc2319177366471ee0bbf570a931974b642a..2cc8c084b0d52a1870f5cdc2e40a3c05b6d191b5 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -103,13 +103,6 @@ public class Block extends BlockBehaviour implements ItemLike {
             this != Blocks.STRUCTURE_BLOCK &&
             this != Blocks.JIGSAW;
     }
-    public co.aikar.timings.Timing timing;
-    public co.aikar.timings.Timing getTiming() {
-        if (timing == null) {
-            timing = co.aikar.timings.MinecraftTimings.getBlockTiming(this);
-        }
-        return timing;
-    }
     // Paper end
     @Nullable
     private String descriptionId;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 4c2e8714c64a6fe49554a11471e37078267f1eea..2731226ad4e525cd5f185590b9b3648b1fcdcfdd 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -33,14 +33,9 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
-
 public abstract class BlockEntity {
     static final ThreadLocal<Boolean> IGNORE_TILE_UPDATES = ThreadLocal.withInitial(() -> Boolean.FALSE); // Paper - Perf: Optimize Hoppers // Folia - region threading
 
-    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     public CraftPersistentDataContainer persistentDataContainer;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 5f60010d44f2a3df8645a0e7dafa3f28d882aecf..b798dbb7d22ab06c8d47c64d2db47b3d9a8fe946 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -793,7 +793,6 @@ public class LevelChunk extends ChunkAccess {
             this.chunkHolder.getEntityChunk().callEntitiesLoadEvent(); // Paper - rewrite chunk system
 
             if (this.needsDecoration) {
-                try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper
                 this.needsDecoration = false;
                 java.util.Random random = new java.util.Random();
                 random.setSeed(this.level.getSeed());
@@ -813,7 +812,6 @@ public class LevelChunk extends ChunkAccess {
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
-                } // Paper
             }
         }
     }
@@ -1185,7 +1183,6 @@ public class LevelChunk extends ChunkAccess {
                         ProfilerFiller gameprofilerfiller = LevelChunk.this.level.getProfiler();
 
                         gameprofilerfiller.push(this::getType);
-                        this.blockEntity.tickTimer.startTiming(); // Spigot
                         profiler.startTimer(timerId); try { // Folia - profiler
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
@@ -1213,9 +1210,6 @@ public class LevelChunk extends ChunkAccess {
                         LevelChunk.this.removeBlockEntity(this.getPos());
                         // Paper end - Prevent block entity and entity crashes
                         // Spigot start
-                    } finally {
-                        this.blockEntity.tickTimer.stopTiming();
-                        // Spigot end
                     }
                 }
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index b86ba59158964f73abd6622341a9acb98a33fa44..8c54b8c16d47d71a5a63e1503b0f3ef2b1085a45 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -346,8 +346,6 @@ public class Main {
             tryPreloadClass("org.jline.terminal.impl.MouseSupport");
             tryPreloadClass("org.jline.terminal.impl.MouseSupport$1");
             tryPreloadClass("org.jline.terminal.Terminal$MouseTracking");
-            tryPreloadClass("co.aikar.timings.TimingHistory");
-            tryPreloadClass("co.aikar.timings.TimingHistory$MinuteReport");
             tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext");
             tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext$11");
             tryPreloadClass("io.netty.channel.AbstractChannelHandlerContext$12");
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index b00e3b9b628f3d2a2fdbf1d2c77904963c16d3ac..86dcb5f24653d65d691c45a2c6860b5e4ec7a608 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,6 +1,5 @@
 package org.bukkit.craftbukkit.scheduler;
 
-import co.aikar.timings.MinecraftTimings; // Paper
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
@@ -304,7 +303,7 @@ public class CraftScheduler implements BukkitScheduler {
                         }
                         return false;
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
+                });
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -344,7 +343,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                     }
-                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);}}; // Paper
+                }); // Paper
         this.handle(task, 0L);
         for (CraftTask taskPending = this.head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -515,10 +514,8 @@ public class CraftScheduler implements BukkitScheduler {
                 this.runners.remove(task.getTaskId());
             }
         }
-        MinecraftTimings.bukkitSchedulerFinishTimer.startTiming(); // Paper
         this.pending.addAll(temp);
         temp.clear();
-        MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming(); // Paper
         //this.debugHead = this.debugHead.getNextHead(currentTick); // Paper
     }
 
@@ -562,7 +559,6 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     void parsePending() { // Paper
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.startTiming(); // Paper
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -581,7 +577,6 @@ public class CraftScheduler implements BukkitScheduler {
             task.setNext(null);
         }
         this.head = lastTask;
-        if (!this.isAsyncScheduler) MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming(); // Paper
     }
 
     private boolean isReady(final int currentTick) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index ea26d9464644b5217879b8c21b4da28e57708dcb..e4868e83cd7883408c598f2dcc3f9f4ea9e967d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -2,14 +2,10 @@ package org.bukkit.craftbukkit.scheduler;
 
 import java.util.function.Consumer;
 
-import co.aikar.timings.NullTimingHandler;
 import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
-import org.spigotmc.CustomTimingsHandler; // Spigot
-import co.aikar.timings.MinecraftTimings; // Paper
-import co.aikar.timings.Timing; // Paper
 
 public class CraftTask implements BukkitTask, Runnable { // Spigot
 
@@ -31,7 +27,6 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     private long nextRun;
     public final Runnable rTask; // Paper
     public final Consumer<BukkitTask> cTask; // Paper
-    public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
     private final long createdAt = System.nanoTime();
@@ -55,7 +50,6 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.id = id;
         this.period = CraftTask.NO_REPEATING;
         this.taskName = taskName;
-        this.timings = MinecraftTimings.getInternalTaskName(taskName);
     }
     // Paper end
 
@@ -76,7 +70,6 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         }
         this.id = id;
         this.period = period;
-        timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : NullTimingHandler.NULL; // Paper
     }
 
     @Override
@@ -96,13 +89,11 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public void run() {
-        try (Timing ignored = timings.startTiming()) { // Paper
         if (this.rTask != null) {
             this.rTask.run();
         } else {
             this.cTask.accept(this);
         }
-        } // Paper
     }
 
     long getCreatedAt() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 46a8262f21ef95714c122240ee86f01858010047..39582882177f4820a317d4ba98429cc5e0cc7f87 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -117,16 +117,9 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     public void forAllObjectives(ObjectiveCriteria criteria, ScoreHolder holder, Consumer<ScoreAccess> consumer) {
         // Paper start - add timings for scoreboard search
         // plugins leaking scoreboards will make this very expensive, let server owners debug it easily
-        co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.startTimingIfSync();
-        try {
-        // Paper end - add timings for scoreboard search
         for (CraftScoreboard scoreboard : this.scoreboards) {
             Scoreboard board = scoreboard.board;
             board.forAllObjectives(criteria, holder, (score) -> consumer.accept(score));
         }
-        } finally { // Paper start - add timings for scoreboard search
-            co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.stopTimingIfSync();
-        }
-        // Paper end - add timings for scoreboard search
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 5a349c554000417cebb5c74fd719fad569b15b05..0c58b662736e931e166dd9bc8ab91d3330c4b742 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -220,7 +220,6 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // Paper start
     @Override
     public void reportTimings() {
-        co.aikar.timings.TimingsExport.reportTimings();
     }
     // Paper end
 
@@ -505,7 +504,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     // Paper start
     @Override
     public String getTimingsServerName() {
-        return io.papermc.paper.configuration.GlobalConfiguration.get().timings.serverName;
+        return io.papermc.paper.ServerBuildInfo.buildInfo().brandName();
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 4fc4690d03fd5f39e019f16845954052210c7361..0e333af159feeccdb43075cc033a1ef533c9d58e 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -34,7 +34,6 @@ import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.entity.projectile.ThrowableProjectile;
 import net.minecraft.world.entity.projectile.ThrownTrident;
 import net.minecraft.world.entity.raid.Raider;
-import co.aikar.timings.MinecraftTimings;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
@@ -168,7 +167,6 @@ public class ActivationRange
      */
     public static void activateEntities(Level world)
     {
-        MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -235,7 +233,6 @@ public class ActivationRange
             }
             // Paper end
         }
-        MinecraftTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
